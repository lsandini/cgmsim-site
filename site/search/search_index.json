{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the CGMSIM documentation \u2301 Introduction \u2301 This application simulates very basically in real time the effects of food and insulin analogs on the blood glucose of a patient with type 1 diabetes (T1D). Rather than blood glucose (BG) values, it displays a continuous glucose sensor (CGM) trace using Nightscout as visualization tool. Since even the most accurate physiological simulators can at best provide only an approximation of what happens in a living organism, the goal of this simulation is not even to try to match reality, but to provide a framework for practising, learning and/or teaching. The treatment goal in type 1 diabetes is to keep the BG or CGM curve values as close as possible to that of a healthy person. In realistic terms, it means 3.9 \u2013 10 mmol/l or 70-180 mg/dl for CGM curves. The Time In Range (TIR) should be at least 70%. Important Please understand that this simulation cannot: predict individual response to treatment replace traditional patient/caregiver education does not depict 100% realistically human physiology This is work in progress, and all feedback is welcome ! Human physiology \u2301 To understand the mechanics of the simulation, a few things must be considered. After eating the absorption of carbohydrates from the gut will also increase the blood glucose. Since insulin replacement is administered subcutaneously and not directly into the hepatic portal vein, some of the ingested food will be absorbed into the main bloodstream directly, bypassing the liver. After a short delay, the CGM will reflect the increase of blood glucose. The endogenous glucose production (EGP) is mainly du to the liver release of glucose into the bloodstream. Either releasing stores (glycogenolysis) or synthesizing new glucose (neoglucogenesis). Various biological states, alcohol and hormones can affect EGP. As glucose is released into the blood stream, the blood glucose concentration increases. Physical exercise affects blood glucose in many ways. Short bouts of intense physical activity will trigger the release of adrenalin, which in turn increases the EGP. In turn, the increased peripheral uptake of glucose in the muscle tissue will lower the blood glucose as physical activity continues. The same continues also during the post exercise phase, until the muscle glycogen stores are repleted. Mealtime insulins have a short duration of activity (DIA, ~3 hours), while long-acting insulin analogs are meant to be injected once or twice a day. Both will lower blood glucose and thus sensor glucose values. The intricate biological pathways affecting the blood glucose variations are difficult to replicate mathematically. The absorption of ingested food from the gut, the absorption of insulin from the subcutaneous tissue, the timing of exercise, the circadian rhythm, menstrual cycle and the alignment of planets and stars all seem to play a role. Adding a touch of random variation (or chaos) brings some realism in the simulation. Why use a simulator ? \u2301 Many scenario-based simulators have been written in the past, like AIDA or the UVA/Padova T1DMS . In contrast, CGMSIM runs in real time like a \"serious game\". It requires time and dedication to reach its goal. It's not a matter of hours or days, but rather weeks or months. Many instances of the simulator can run on one computer, serving many users at a time, making team training possible. Healthcare Professionals - HCPs Unless you or your family member has T1D, it is hard to figure how treatment can be time-consuming, technically difficult or frustrating. Even without having to worry about the risk of long-term vascular complications or acute life-threatening hypoglycemia, early adopters of this simulator showed signs of treatment fatigue after a few weeks already. Living with incertainty 24/7, and facing reports of treatment \"success\" will teach some humility and empathy. Not all patients are equal... Every simulated patient can be defined in terms of weight, insulin sensitivity, amplitude of EGP variability. This website will describe step by step how to install and kickstart the simulation as an administrator, and how to use it as an end-user.","title":"Home"},{"location":"#welcome-to-the-cgmsim-documentation","text":"","title":"Welcome to the CGMSIM documentation"},{"location":"#introduction","text":"This application simulates very basically in real time the effects of food and insulin analogs on the blood glucose of a patient with type 1 diabetes (T1D). Rather than blood glucose (BG) values, it displays a continuous glucose sensor (CGM) trace using Nightscout as visualization tool. Since even the most accurate physiological simulators can at best provide only an approximation of what happens in a living organism, the goal of this simulation is not even to try to match reality, but to provide a framework for practising, learning and/or teaching. The treatment goal in type 1 diabetes is to keep the BG or CGM curve values as close as possible to that of a healthy person. In realistic terms, it means 3.9 \u2013 10 mmol/l or 70-180 mg/dl for CGM curves. The Time In Range (TIR) should be at least 70%. Important Please understand that this simulation cannot: predict individual response to treatment replace traditional patient/caregiver education does not depict 100% realistically human physiology This is work in progress, and all feedback is welcome !","title":"Introduction"},{"location":"#human-physiology","text":"To understand the mechanics of the simulation, a few things must be considered. After eating the absorption of carbohydrates from the gut will also increase the blood glucose. Since insulin replacement is administered subcutaneously and not directly into the hepatic portal vein, some of the ingested food will be absorbed into the main bloodstream directly, bypassing the liver. After a short delay, the CGM will reflect the increase of blood glucose. The endogenous glucose production (EGP) is mainly du to the liver release of glucose into the bloodstream. Either releasing stores (glycogenolysis) or synthesizing new glucose (neoglucogenesis). Various biological states, alcohol and hormones can affect EGP. As glucose is released into the blood stream, the blood glucose concentration increases. Physical exercise affects blood glucose in many ways. Short bouts of intense physical activity will trigger the release of adrenalin, which in turn increases the EGP. In turn, the increased peripheral uptake of glucose in the muscle tissue will lower the blood glucose as physical activity continues. The same continues also during the post exercise phase, until the muscle glycogen stores are repleted. Mealtime insulins have a short duration of activity (DIA, ~3 hours), while long-acting insulin analogs are meant to be injected once or twice a day. Both will lower blood glucose and thus sensor glucose values. The intricate biological pathways affecting the blood glucose variations are difficult to replicate mathematically. The absorption of ingested food from the gut, the absorption of insulin from the subcutaneous tissue, the timing of exercise, the circadian rhythm, menstrual cycle and the alignment of planets and stars all seem to play a role. Adding a touch of random variation (or chaos) brings some realism in the simulation.","title":"Human physiology"},{"location":"#why-use-a-simulator","text":"Many scenario-based simulators have been written in the past, like AIDA or the UVA/Padova T1DMS . In contrast, CGMSIM runs in real time like a \"serious game\". It requires time and dedication to reach its goal. It's not a matter of hours or days, but rather weeks or months. Many instances of the simulator can run on one computer, serving many users at a time, making team training possible. Healthcare Professionals - HCPs Unless you or your family member has T1D, it is hard to figure how treatment can be time-consuming, technically difficult or frustrating. Even without having to worry about the risk of long-term vascular complications or acute life-threatening hypoglycemia, early adopters of this simulator showed signs of treatment fatigue after a few weeks already. Living with incertainty 24/7, and facing reports of treatment \"success\" will teach some humility and empathy. Not all patients are equal... Every simulated patient can be defined in terms of weight, insulin sensitivity, amplitude of EGP variability. This website will describe step by step how to install and kickstart the simulation as an administrator, and how to use it as an end-user.","title":"Why use a simulator ?"},{"location":"contact/","text":"Contact me ! \u2301 If you have suggestions or would like to contribut, feel free to contact me by email lsandini@gmail.com . Thank you !","title":"Contact me"},{"location":"contact/#contact-me","text":"If you have suggestions or would like to contribut, feel free to contact me by email lsandini@gmail.com . Thank you !","title":"Contact me !"},{"location":"build/clone/","text":"Downloading the simulator \u2301 Cloning the repository \u2301 Log into your Ubuntu terminal, and then run this command : git clone https://github.com/lsandini/cgmsim.git That's it. A folder called cgmsim has been made for you and all the needed files are in there. If you'd like to run more simulators on the same machine, just run: git clone https://github.com/lsandini/cgmsim.git cgmsim2 ... and a separate folder called \"cgmsim2\" is made, identical to \"cgmsim\" Installing dependencies \u2301 Enter the installation directory of your choice with the cd command (cd = change directory): cd cgmsim or cd cgmsim2 ... or whatever your named your install folder. In your linux terminal, type: sudo bash install_dependencies.sh Your password will be required. You might see warnings during the installation and it might take a little while. Disregard the warnings and just wait for the process to complete.","title":"Download"},{"location":"build/clone/#downloading-the-simulator","text":"","title":"Downloading the simulator"},{"location":"build/clone/#cloning-the-repository","text":"Log into your Ubuntu terminal, and then run this command : git clone https://github.com/lsandini/cgmsim.git That's it. A folder called cgmsim has been made for you and all the needed files are in there. If you'd like to run more simulators on the same machine, just run: git clone https://github.com/lsandini/cgmsim.git cgmsim2 ... and a separate folder called \"cgmsim2\" is made, identical to \"cgmsim\"","title":"Cloning the repository"},{"location":"build/clone/#installing-dependencies","text":"Enter the installation directory of your choice with the cd command (cd = change directory): cd cgmsim or cd cgmsim2 ... or whatever your named your install folder. In your linux terminal, type: sudo bash install_dependencies.sh Your password will be required. You might see warnings during the installation and it might take a little while. Disregard the warnings and just wait for the process to complete.","title":"Installing dependencies"},{"location":"build/kickstart/","text":"","title":"Kickstart"},{"location":"build/linux/","text":"","title":"Linux/Ubuntu"},{"location":"build/nightscout/","text":"","title":"Nightscout"},{"location":"build/overview/","text":"Installation overview \u2301 Nightscout \u2301 In order to use this simulator, you'll need an instance of Nightscout (NS). If you are not familiar with NS, go over to Nightscout new users and be sure to follow all the steps and perform this installation first. Make sure to write down the URL and the APISECRET (for example \"MYAPISECRET1\"). The CGMSIM simulator itself \u2301 The simulator itself works in a Linux Ubuntu 20.04 LTS environment. You'll need a computer or a virtual machine running Ubuntu in order to complete the CGMSIM installation. I recommend using a Raspberry Pi (RPi) device, as it is the cheapest and most energy efficient solution. I currently host 10 simulated patients on a headless RPi3, without any monthly cost other than my broadband internet subscription. I do not recommend running the simulation as the root user. Instead, create a regular user with sudo privileges, in my case \"lorenzo\". There are plenty of tutorials for that. The next steps are descibed separately and they involve: downloading all the files from this Github repository installating the dependencies necessary for running the simulator setting up the environment variables kickstarting the simulator scheduling the tasks Using CGMSIM in a browser \u2301 Nightscout is broadly compatible with a wide range of browsers, both on desktop/laptop computers and handheld devices. The use of CGMSIM happens is a browser, and it doesn't require any app installation by its user.","title":"Overview"},{"location":"build/overview/#installation-overview","text":"","title":"Installation overview"},{"location":"build/overview/#nightscout","text":"In order to use this simulator, you'll need an instance of Nightscout (NS). If you are not familiar with NS, go over to Nightscout new users and be sure to follow all the steps and perform this installation first. Make sure to write down the URL and the APISECRET (for example \"MYAPISECRET1\").","title":"Nightscout"},{"location":"build/overview/#the-cgmsim-simulator-itself","text":"The simulator itself works in a Linux Ubuntu 20.04 LTS environment. You'll need a computer or a virtual machine running Ubuntu in order to complete the CGMSIM installation. I recommend using a Raspberry Pi (RPi) device, as it is the cheapest and most energy efficient solution. I currently host 10 simulated patients on a headless RPi3, without any monthly cost other than my broadband internet subscription. I do not recommend running the simulation as the root user. Instead, create a regular user with sudo privileges, in my case \"lorenzo\". There are plenty of tutorials for that. The next steps are descibed separately and they involve: downloading all the files from this Github repository installating the dependencies necessary for running the simulator setting up the environment variables kickstarting the simulator scheduling the tasks","title":"The CGMSIM simulator itself"},{"location":"build/overview/#using-cgmsim-in-a-browser","text":"Nightscout is broadly compatible with a wide range of browsers, both on desktop/laptop computers and handheld devices. The use of CGMSIM happens is a browser, and it doesn't require any app installation by its user.","title":"Using CGMSIM in a browser"},{"location":"build/setupscript/","text":"","title":"Setup"},{"location":"model/food/","text":"Modeling the absorption of Carbs from the gut \u2301 There are many complicated and more or less precise published models of carb absorption, but for the purpose of this simulation, a simple bilinear model like the one found in the book Think Like a Pancreas by Gary Scheiner, and used in Perceptus' Glucodyn simulator will do for now. . So if the absorption time (AT) were 4 hours, the absorption rate increases linearly until it reaches and peak, then decreases linearly to the end. The surface area of the triangle represents the Dose, or the amount of ingested carbs. The peak absorption rate is \"h\". It can be represented with the following equation: \\[ Dose = {AT \\times h \\over 2} \\] Let's get rid of the \"h\" : In the increasing phase of absorption : $$ CAR(t) = {2 \\times h} \\times {t \\over AT} => {4 \\times Dose \\over AT^2} \\times t $$ And in the decreasing phase: \\[ CAR(t) = {2 \\times h} \\times {(1 - t) \\over AT} => {4 \\times Dose \\over AT} \\times {(1 - {t \\over AT})} \\] Mixed meals and Snacks To make the absorption of carbs more realistic, the first 40 g of each meal will always be fast absorbing . For bigger meals, the excess carbs over 40g are divided in fast and slow absorbing parts. The ratio of fast absorbing carbs is randomly computed to be 10-40 % of the carb excess . So for a meal declared as 100g, the first 40 are fast carbs. The remaining 60g will be divided randomly in slow and fast parts. You'll find out sooner or later. In the current version of the algorithm, the fast carbs will be absorbed according to the bilinear model mentioned above, over a period of time of one hour. The remaining (slow) carbs are absorbed in a similar bilinear fashion, but over a period of 4 hours. This can be set in the interactive setup script during installation.","title":"Carb absorption from the gut"},{"location":"model/food/#modeling-the-absorption-of-carbs-from-the-gut","text":"There are many complicated and more or less precise published models of carb absorption, but for the purpose of this simulation, a simple bilinear model like the one found in the book Think Like a Pancreas by Gary Scheiner, and used in Perceptus' Glucodyn simulator will do for now. . So if the absorption time (AT) were 4 hours, the absorption rate increases linearly until it reaches and peak, then decreases linearly to the end. The surface area of the triangle represents the Dose, or the amount of ingested carbs. The peak absorption rate is \"h\". It can be represented with the following equation: \\[ Dose = {AT \\times h \\over 2} \\] Let's get rid of the \"h\" : In the increasing phase of absorption : $$ CAR(t) = {2 \\times h} \\times {t \\over AT} => {4 \\times Dose \\over AT^2} \\times t $$ And in the decreasing phase: \\[ CAR(t) = {2 \\times h} \\times {(1 - t) \\over AT} => {4 \\times Dose \\over AT} \\times {(1 - {t \\over AT})} \\] Mixed meals and Snacks To make the absorption of carbs more realistic, the first 40 g of each meal will always be fast absorbing . For bigger meals, the excess carbs over 40g are divided in fast and slow absorbing parts. The ratio of fast absorbing carbs is randomly computed to be 10-40 % of the carb excess . So for a meal declared as 100g, the first 40 are fast carbs. The remaining 60g will be divided randomly in slow and fast parts. You'll find out sooner or later. In the current version of the algorithm, the fast carbs will be absorbed according to the bilinear model mentioned above, over a period of time of one hour. The remaining (slow) carbs are absorbed in a similar bilinear fashion, but over a period of 4 hours. This can be set in the interactive setup script during installation.","title":"Modeling the absorption of Carbs from the gut"},{"location":"model/la-agonists/","text":"Modeling the activities of the long-acting agonists \u2301 For detemir and glargine instead, mathematical models are missing. Based on clamp studies in T1D, the intra-individual day-to-day variation is an important factor affecting the predictability of a single repeated dose. Moreover, the inter-individual variability makes modeling even more a challenge. Even with the best curve-fitting tools, no \u201cglobal model\u201d was achieved. Since the goal is not to make a perfect model, I first decided to use a sinusoidal curve to model detemir, and a half-ellipse for glargine. The obvious reasons are that the mathematics are simple \ud83d\ude2c Using biexponential models \u2301 While the very basic mathematical models of long acting insulin analogs are good enough for training (see blow), getting closer to published \"curves\" and physiological activity is necessary. I decided to adopt the biexponential model used for mealtime insulins to long-acting insulin agonists. The activity of detemir and glargine-U100 depend on the absolute amount (units), but also on the dose in relation to the patient's weight (U/kg). Also, the peak of action is achieved at different timepoints. The DIA of detemir is more variable and dose dependent than that of glargine. Models for glargine U300 and degludec will be added later on, if anyone finds them useful. Bi-exponential models For detemir, the duration of action is 14h + (24* dose/weight), and the peak is at duration/3. For glargine U100, the duration of action is 22h + (12* dose/weight), and the peak is at duration/2.5. Here are some activity curves as depicted in many publications. Notice that the curve colours are different, and some of the activity curves seem to derived from steady-state euglycemic clamps. : OLD MODELS ! \u2301 Important The old models for detemir and glargine U100 are still in use in the current version of the simulator, so here is the technical explanation for those still using them. They will be deprecated after the new model have been thouroughly tested. Modeling Levemir (Levemir\u00ae) \u2301 The clamp studies show that the dose-response curve is linear. With increasing doses from 0.1U/kg to 1.6U/kg, the total activity, or area under the curve (AUC) of the glucose infusion rate (GIR) needed to maintain normal blood glucose follows a straight line. However, the DIA seems related to the dose/kg, so that had to be considered in the model. The AUC precisely reflects the injected number of units and is identical for 12U @0.1U/kg and 12U @0.4U/kg. However, when increasing the do dose from 12U @0.4U/kg to 24U @0.4U/kg, you can see that the DIA increases: Duration of Levemir action = 16 + (20 * U/weight) So for 0.1 U/kg, the duration of action is 16+(20 * 0.1) = 18 hours, and for 0.4U/kg, the DIA is 16+(20 * 0.4) = 24 hours. And the model itself is: y= units * (Math.PI/(duration * 2)) * (Math.sin(time * Math.PI/duration)); (for the biexponential model in detemir2.js, the duration of activity = (14 + (24 * dose/weight)), and the peak is duration/3. Modeling Glargine (Lantus\u00ae, Abasaglar\u00ae, Toujeo\u00ae) \u2301 For the time being, only glargine U100 is basically modeled here, with a DIA of 27 hours. Again, the AUC reflects the injected dose. I \u201cchopped\u201d the equation in little bits fo clarity : b = (2 * basalDose)/(Math.PI * duration); // duration is 27 hours x = (Date.now() - time0)/(60 * 60 * 1000); //time0 is the time of injection g = x-(duration / 2); gg = Math.pow(g,2); h = duration / 2; hh= Math.pow(h,2); z = (x-gg) / hh; bb = Math.pow(b,2); y = 2 * Math.sqrt(bb * (1+z)); // where y is the activity of glargine over time (for the biexponential model in glargine2.js, the duration of activity = (22 + (12 * dose/weight)), and the peak is duration/2.5 . Here is a visual aid illustrating the differences between the activity curves of detemir and glargine at different doses:","title":"Long-acting insulin Agonists"},{"location":"model/la-agonists/#modeling-the-activities-of-the-long-acting-agonists","text":"For detemir and glargine instead, mathematical models are missing. Based on clamp studies in T1D, the intra-individual day-to-day variation is an important factor affecting the predictability of a single repeated dose. Moreover, the inter-individual variability makes modeling even more a challenge. Even with the best curve-fitting tools, no \u201cglobal model\u201d was achieved. Since the goal is not to make a perfect model, I first decided to use a sinusoidal curve to model detemir, and a half-ellipse for glargine. The obvious reasons are that the mathematics are simple \ud83d\ude2c","title":"Modeling the activities of the long-acting agonists"},{"location":"model/la-agonists/#using-biexponential-models","text":"While the very basic mathematical models of long acting insulin analogs are good enough for training (see blow), getting closer to published \"curves\" and physiological activity is necessary. I decided to adopt the biexponential model used for mealtime insulins to long-acting insulin agonists. The activity of detemir and glargine-U100 depend on the absolute amount (units), but also on the dose in relation to the patient's weight (U/kg). Also, the peak of action is achieved at different timepoints. The DIA of detemir is more variable and dose dependent than that of glargine. Models for glargine U300 and degludec will be added later on, if anyone finds them useful. Bi-exponential models For detemir, the duration of action is 14h + (24* dose/weight), and the peak is at duration/3. For glargine U100, the duration of action is 22h + (12* dose/weight), and the peak is at duration/2.5. Here are some activity curves as depicted in many publications. Notice that the curve colours are different, and some of the activity curves seem to derived from steady-state euglycemic clamps. :","title":"Using biexponential models"},{"location":"model/la-agonists/#old-models","text":"Important The old models for detemir and glargine U100 are still in use in the current version of the simulator, so here is the technical explanation for those still using them. They will be deprecated after the new model have been thouroughly tested.","title":"OLD MODELS !"},{"location":"model/la-agonists/#modeling-levemir-levemir","text":"The clamp studies show that the dose-response curve is linear. With increasing doses from 0.1U/kg to 1.6U/kg, the total activity, or area under the curve (AUC) of the glucose infusion rate (GIR) needed to maintain normal blood glucose follows a straight line. However, the DIA seems related to the dose/kg, so that had to be considered in the model. The AUC precisely reflects the injected number of units and is identical for 12U @0.1U/kg and 12U @0.4U/kg. However, when increasing the do dose from 12U @0.4U/kg to 24U @0.4U/kg, you can see that the DIA increases: Duration of Levemir action = 16 + (20 * U/weight) So for 0.1 U/kg, the duration of action is 16+(20 * 0.1) = 18 hours, and for 0.4U/kg, the DIA is 16+(20 * 0.4) = 24 hours. And the model itself is: y= units * (Math.PI/(duration * 2)) * (Math.sin(time * Math.PI/duration)); (for the biexponential model in detemir2.js, the duration of activity = (14 + (24 * dose/weight)), and the peak is duration/3.","title":"Modeling Levemir (Levemir\u00ae)"},{"location":"model/la-agonists/#modeling-glargine-lantus-abasaglar-toujeo","text":"For the time being, only glargine U100 is basically modeled here, with a DIA of 27 hours. Again, the AUC reflects the injected dose. I \u201cchopped\u201d the equation in little bits fo clarity : b = (2 * basalDose)/(Math.PI * duration); // duration is 27 hours x = (Date.now() - time0)/(60 * 60 * 1000); //time0 is the time of injection g = x-(duration / 2); gg = Math.pow(g,2); h = duration / 2; hh= Math.pow(h,2); z = (x-gg) / hh; bb = Math.pow(b,2); y = 2 * Math.sqrt(bb * (1+z)); // where y is the activity of glargine over time (for the biexponential model in glargine2.js, the duration of activity = (22 + (12 * dose/weight)), and the peak is duration/2.5 . Here is a visual aid illustrating the differences between the activity curves of detemir and glargine at different doses:","title":"Modeling Glargine (Lantus\u00ae, Abasaglar\u00ae, Toujeo\u00ae)"},{"location":"model/liver/","text":"Modeling the Endogenous Glucose Production (EGP) by the liver \u2301 While this is absolutely neither true nor realistic, for the time being the EGP is modeled as a linear function of time. It equivalents to 10g of absorbed carbs/hour, so depending on the user's insulin sensitivity factor (ISF, mmol/l/U) and carb ratio (CR, g/U), an the EGP effect is EGP * ISF * CR expressed in mmol/l/g. The EGP is significantly affected but the insulin activity, since in the repleted rested state, insulin decreases the liver glucose production more than it increases the peripheral glucose uptake. Moreover other factor like the ingestion of alcohol will significantly decrease the EGP, which could be simple modeled in the future. 16.05.2021 This feature is not yet in use, but a sinusoidal function is added, with which the liver blood glucose impact can be set to vary in a sinusoidal or cosinusoidal manner. The file sinus.js creates the waveforms, and liver.js computes and writes latest_liver.json , not in use yet. This can be added to sgv_start.js later. 17.05.2021 Now sinusoidal variation of liver glucose production is in testing phase. If the ISF is 2mmol/l/U and the CR is 10g/U, then the Carb Factor (CF) is 2mmol/l/10g. Since 10g are produced per hour, the increase in BG due to the liver glucose production is 2mmol/l/h or 0.1666 mmol/l/5min. Multiplying this by a sinusoidal value oscillating from 0.8 to 1.2 will make this impact on BG vary from 0.1333 to 0.2000 mmol/l/5min. the sinus cycle starts at midnight, is maximal at 6 AM (mimicking a dawn effect), back to baseline at 12 AM, minimal at 6 PM (mimicking the effect of light physical activity), and back to baseline at midnight.","title":"Endogenous Glucose production"},{"location":"model/liver/#modeling-the-endogenous-glucose-production-egp-by-the-liver","text":"While this is absolutely neither true nor realistic, for the time being the EGP is modeled as a linear function of time. It equivalents to 10g of absorbed carbs/hour, so depending on the user's insulin sensitivity factor (ISF, mmol/l/U) and carb ratio (CR, g/U), an the EGP effect is EGP * ISF * CR expressed in mmol/l/g. The EGP is significantly affected but the insulin activity, since in the repleted rested state, insulin decreases the liver glucose production more than it increases the peripheral glucose uptake. Moreover other factor like the ingestion of alcohol will significantly decrease the EGP, which could be simple modeled in the future. 16.05.2021 This feature is not yet in use, but a sinusoidal function is added, with which the liver blood glucose impact can be set to vary in a sinusoidal or cosinusoidal manner. The file sinus.js creates the waveforms, and liver.js computes and writes latest_liver.json , not in use yet. This can be added to sgv_start.js later. 17.05.2021 Now sinusoidal variation of liver glucose production is in testing phase. If the ISF is 2mmol/l/U and the CR is 10g/U, then the Carb Factor (CF) is 2mmol/l/10g. Since 10g are produced per hour, the increase in BG due to the liver glucose production is 2mmol/l/h or 0.1666 mmol/l/5min. Multiplying this by a sinusoidal value oscillating from 0.8 to 1.2 will make this impact on BG vary from 0.1333 to 0.2000 mmol/l/5min. the sinus cycle starts at midnight, is maximal at 6 AM (mimicking a dawn effect), back to baseline at 12 AM, minimal at 6 PM (mimicking the effect of light physical activity), and back to baseline at midnight.","title":"Modeling the Endogenous Glucose Production (EGP) by the liver"},{"location":"model/mealtime/","text":"Modeling the activity of mealtime insulins \u2301 While simple \"bilinear\" models have been used in the past, precise modeling has been done for aspart and lispro. The biexponential model by Dragan Maksimovic described here fits the published data from clamp studies. A very good explanation of this models in given in the openAPS documentation . I use model to this compute the activity of each mealtime insulin dose. I selected a time-to-peak of 60 minutes and a duration of insulin action (DIA) of 300 min (5 hours!) as default. Mealtime insulins have a duration of activity closer to 180 min or 3 hours. For faster aspart (Fiasp\u00ae), you may want to choose an even shorter time-to-peak and DIA. You will be able to set your own time-to-peak and DIA values during the interactive setup, along with other \"patient-related\" variables. In simple terms, this means that the effect of insulin will increase from the moment of injection until it reaches a maximum \"peak\", and then decrease to 0 at the end of the DIA. Parameters: td = duration, Ia(td)=0, IOB(td)=0, tp = peak activity time, both expressed in minutes. Time constant of exponential decay = \\(\\tau\\) . \\[ \\text{Time constant of exponential decay } \\tau = { tp \\times {(1-tp/td)}\\over {(1-2 \\times tp/td)} } \\] \\[ \\text{Rise time factor } a = { 2 \\times \\tau \\over td} \\] Rise time factor: a = 2 tau/td Auxiliary scale factor: S = 1/(1-a+(1+a) exp(-td/tau)) Insulin activity curve: Ia(t) = (S/tau^2) t (1-t/td)*exp(-t/tau)","title":"Mealtime Insulin"},{"location":"model/mealtime/#modeling-the-activity-of-mealtime-insulins","text":"While simple \"bilinear\" models have been used in the past, precise modeling has been done for aspart and lispro. The biexponential model by Dragan Maksimovic described here fits the published data from clamp studies. A very good explanation of this models in given in the openAPS documentation . I use model to this compute the activity of each mealtime insulin dose. I selected a time-to-peak of 60 minutes and a duration of insulin action (DIA) of 300 min (5 hours!) as default. Mealtime insulins have a duration of activity closer to 180 min or 3 hours. For faster aspart (Fiasp\u00ae), you may want to choose an even shorter time-to-peak and DIA. You will be able to set your own time-to-peak and DIA values during the interactive setup, along with other \"patient-related\" variables. In simple terms, this means that the effect of insulin will increase from the moment of injection until it reaches a maximum \"peak\", and then decrease to 0 at the end of the DIA. Parameters: td = duration, Ia(td)=0, IOB(td)=0, tp = peak activity time, both expressed in minutes. Time constant of exponential decay = \\(\\tau\\) . \\[ \\text{Time constant of exponential decay } \\tau = { tp \\times {(1-tp/td)}\\over {(1-2 \\times tp/td)} } \\] \\[ \\text{Rise time factor } a = { 2 \\times \\tau \\over td} \\] Rise time factor: a = 2 tau/td Auxiliary scale factor: S = 1/(1-a+(1+a) exp(-td/tau)) Insulin activity curve: Ia(t) = (S/tau^2) t (1-t/td)*exp(-t/tau)","title":"Modeling the activity of mealtime insulins"},{"location":"model/overview/","text":"Overview \u2301 Here you'll find details about the sequence of events happening in the simulation. When your simulation has been kickstarted , 3 sensor glucose values of 5 mmol/l or 90 md/dl (sgv) have been uploaded to your Nightscout (NS) website. The \"inner clock\" of the computer hosting the simulation will trigger the execution of various scripts at regular intervals. Sequence of events gather previous sensor glucose values gather previous \"treatments\" (food and/or insulin doses) compute the endogenous glucose production (EGP) compute a random variability factor (RND) compute the global impact of treatments, EGP and RND on glucose values (delta) compute the direction of arrows based on the previous deltas upload a new sensor glucose value and arrow to NS every 5 minutes repeat the cycle indefinitely ISF, CR, CF, BGI \u2301 The Insulin Sensitivity Factor (ISF) represents the impact on BG attributable to the effect of 1 unit of insulin. Its measurement usint is mmol/l/U. So an ISF of 2 means that the blood sugar concentration decreases 2 mmol/l for each given insulin unit. The Carb Ratio (CR) represents the amount of insulin needed to counteract a defined amount of carbs. It is expressed as g/U. For example if 10g of carbs are counteracted by 1 unit of mealtime insulin, the CR is 10 g/U. The Carb (sensitivity) Factor (CF) represents the impact of a defined amount of absorbed carbs on the blood glucose concentration. It can be expressed on mmol/l/g. A simple way to compute is the following: if 1 unit of insulin is needed to decrease BG by 2 mmol/l, and the same 1 U of insulin is needed to counteract 20g or carbs, then the CF is 2 mmol/l / 20g or 1 mmol/l/10g. (CF = CR/ISF) The BGI or Blood Glucose Impact is the absolute change in BG concentration due an amount of insulin or carbs. Examples : With an ISF of 2.5, the BGI of 4 units of insulin is 4U * 2.5mmol/l/U = 10 mmol/l (decrease in BG) With a CF of 1.8, the BGI of 50 grams of carbs is 50g * 1.8 mmol/l/g = 9 mmol/l (increase in BG) Linear, polynomial, exponential models \u2301 The cumulative BGI of all these factors combined is called the \"delta\", or change from the previous BG value. Is is calculated for 5 minute intervals, then added (or substracted from the previous sensor glucose value). It does not describe how fast the change is happening . The Blood Glucose Impact of 1 unit of mealtime insulin is achieved at the end of the duration os action of insulin (DIA), and the BGI of 50g of carbs is achieved as the whole meal is absorbed, sometimes only 6 hours after the meal is comsumed. Describing the intensity of the effect of insulin or carbs along time is called modeling. Models in detail Next we'll see in detail how various insulins, food, endogenous glucose production and random effect can be modeled mathematically.","title":"Overview"},{"location":"model/overview/#overview","text":"Here you'll find details about the sequence of events happening in the simulation. When your simulation has been kickstarted , 3 sensor glucose values of 5 mmol/l or 90 md/dl (sgv) have been uploaded to your Nightscout (NS) website. The \"inner clock\" of the computer hosting the simulation will trigger the execution of various scripts at regular intervals. Sequence of events gather previous sensor glucose values gather previous \"treatments\" (food and/or insulin doses) compute the endogenous glucose production (EGP) compute a random variability factor (RND) compute the global impact of treatments, EGP and RND on glucose values (delta) compute the direction of arrows based on the previous deltas upload a new sensor glucose value and arrow to NS every 5 minutes repeat the cycle indefinitely","title":"Overview"},{"location":"model/overview/#isf-cr-cf-bgi","text":"The Insulin Sensitivity Factor (ISF) represents the impact on BG attributable to the effect of 1 unit of insulin. Its measurement usint is mmol/l/U. So an ISF of 2 means that the blood sugar concentration decreases 2 mmol/l for each given insulin unit. The Carb Ratio (CR) represents the amount of insulin needed to counteract a defined amount of carbs. It is expressed as g/U. For example if 10g of carbs are counteracted by 1 unit of mealtime insulin, the CR is 10 g/U. The Carb (sensitivity) Factor (CF) represents the impact of a defined amount of absorbed carbs on the blood glucose concentration. It can be expressed on mmol/l/g. A simple way to compute is the following: if 1 unit of insulin is needed to decrease BG by 2 mmol/l, and the same 1 U of insulin is needed to counteract 20g or carbs, then the CF is 2 mmol/l / 20g or 1 mmol/l/10g. (CF = CR/ISF) The BGI or Blood Glucose Impact is the absolute change in BG concentration due an amount of insulin or carbs. Examples : With an ISF of 2.5, the BGI of 4 units of insulin is 4U * 2.5mmol/l/U = 10 mmol/l (decrease in BG) With a CF of 1.8, the BGI of 50 grams of carbs is 50g * 1.8 mmol/l/g = 9 mmol/l (increase in BG)","title":"ISF, CR, CF, BGI"},{"location":"model/overview/#linear-polynomial-exponential-models","text":"The cumulative BGI of all these factors combined is called the \"delta\", or change from the previous BG value. Is is calculated for 5 minute intervals, then added (or substracted from the previous sensor glucose value). It does not describe how fast the change is happening . The Blood Glucose Impact of 1 unit of mealtime insulin is achieved at the end of the duration os action of insulin (DIA), and the BGI of 50g of carbs is achieved as the whole meal is absorbed, sometimes only 6 hours after the meal is comsumed. Describing the intensity of the effect of insulin or carbs along time is called modeling. Models in detail Next we'll see in detail how various insulins, food, endogenous glucose production and random effect can be modeled mathematically.","title":"Linear, polynomial, exponential models"},{"location":"model/physical/","text":"Modeling exercise \u2301 04.08.2021 I just found a way to import Apple Healthkit data from my iPhone my simulator in JSON form. Exercise modeling is not part of the project (yet), but I might use heart rate or cumulative step data when computing CGM values in the future. Something similar from Android wearables or Fitbit wristbands would be cool too. 12.09.2012 Now the files server.js and steps.js have been added. I am using an app called \"Health Auto Export\" that pack selected Health data from the Apple Health App and uploads it in JSON format. I wrote a little API in Node/Express accepting the uploads, and sending the heart rate data as \"BG\" values for display. Dispplay is of course optional, but the heart rate data and the cumulative steps count will be used in the next version ove the simulator to influence the behavious of the CGM curve. Thanks to Lybron Sobers for the export app ! https://github.com/Lybron/health-auto-export","title":"Physical activity"},{"location":"model/physical/#modeling-exercise","text":"04.08.2021 I just found a way to import Apple Healthkit data from my iPhone my simulator in JSON form. Exercise modeling is not part of the project (yet), but I might use heart rate or cumulative step data when computing CGM values in the future. Something similar from Android wearables or Fitbit wristbands would be cool too. 12.09.2012 Now the files server.js and steps.js have been added. I am using an app called \"Health Auto Export\" that pack selected Health data from the Apple Health App and uploads it in JSON format. I wrote a little API in Node/Express accepting the uploads, and sending the heart rate data as \"BG\" values for display. Dispplay is of course optional, but the heart rate data and the cumulative steps count will be used in the next version ove the simulator to influence the behavious of the CGM curve. Thanks to Lybron Sobers for the export app ! https://github.com/Lybron/health-auto-export","title":"Modeling exercise"},{"location":"model/random/","text":"Random effects \u2301 Since random number generators produce very jumpy values with various distributions between defined limits, I preferred trying a smoother, more \"organic\" noise function curve. Using a one-dimensional perlin-noise generator, an array of 17 * 17 = 289 values (perlin.json) is produced each night at midnight by perlin.js . Each value gets a timestamp in 5 minute increments. Read more about perlin noise here: https://github.com/andrewrk/node-perlin-noise#readme. Every five minutes, as the next SGV value is computed, the latest perlin noise value in the last 5 minutes is taken into account. For now, the best settings are amplitude 0.3, octaves 1 and persistance 0.3. The values are multiplied by 10, and then again by 18 to get mg/dl, then added to the SGV jst before upload.","title":"Random variation"},{"location":"model/random/#random-effects","text":"Since random number generators produce very jumpy values with various distributions between defined limits, I preferred trying a smoother, more \"organic\" noise function curve. Using a one-dimensional perlin-noise generator, an array of 17 * 17 = 289 values (perlin.json) is produced each night at midnight by perlin.js . Each value gets a timestamp in 5 minute increments. Read more about perlin noise here: https://github.com/andrewrk/node-perlin-noise#readme. Every five minutes, as the next SGV value is computed, the latest perlin noise value in the last 5 minutes is taken into account. For now, the best settings are amplitude 0.3, octaves 1 and persistance 0.3. The values are multiplied by 10, and then again by 18 to get mg/dl, then added to the SGV jst before upload.","title":"Random effects"},{"location":"operate/insulin/","text":"","title":"Declaring insulin doses"},{"location":"operate/meals/","text":"","title":"Declaring meals"},{"location":"operate/overview/","text":"","title":"Overview"},{"location":"operate/reports/","text":"","title":"View reports"}]}