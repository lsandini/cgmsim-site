{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the CGMSIM documentation \u2301 Introduction \u2301 This application is an interactive real time simulation of the effects of food and insulin analogs on the blood glucose of a patient with type 1 diabetes (T1D). Rather than blood glucose (BG) values, it displays a continuous glucose sensor (CGM) trace using Nightscout as visualization tool. This is what it looks like, in an accelerated view : Since even the most accurate physiological simulators can at best provide only an approximation of what happens in a living organism, the goal of this simulation is not even to try to match reality, but to provide a framework for practising, learning and/or teaching. The treatment goal in type 1 diabetes is to keep the BG or CGM curve values as close as possible to that of a healthy person. In realistic terms, it means 3.9 \u2013 10 mmol/l or 70-180 mg/dl for CGM curves. The Time In Range (TIR) should be at least 70%. Important Please understand that this simulation: cannot predict individual response to treatment cannot replace traditional patient/caregiver education does not depict 100% realistically human physiology This is work in progress, and all feedback is welcome ! Human physiology \u2301 To understand the mechanics of the simulation, a few things must be considered. After a meal, the absorption of carbohydrates from the gut will also increase the blood glucose. Since insulin replacement is administered subcutaneously and not directly into the hepatic portal vein, some of the ingested food will be absorbed into the main bloodstream directly, bypassing the liver. After a short delay, the CGM will reflect the increase of blood glucose. The endogenous glucose production (EGP) is mainly du to the liver release of glucose into the bloodstream. Either by releasing stores (glycogenolysis) or by synthesizing new glucose (neoglucogenesis). Various biological states, alcohol and hormones can affect EGP. As glucose is released into the blood stream, the blood glucose concentration increases. Physical exercise affects blood glucose in many ways. Short bouts of intense physical activity will trigger the release of adrenaline, which increases the EGP. In turn, the increased peripheral uptake of glucose in the muscle tissue will lower the blood glucose as physical activity continues. The same continues also during the post exercise phase, until the muscle glycogen stores are repleted. Mealtime insulins have a short duration of activity (DIA, ~3 hours), while long-acting insulin analogs are meant to be injected once or twice a day. Both will lower blood glucose and thus sensor glucose values. The intricate biological pathways affecting the blood glucose variations are difficult to replicate mathematically. The absorption of ingested food from the gut, the absorption of insulin from the subcutaneous tissue, the timing of exercise, the circadian rhythm, menstrual cycle, the moon phase and the alignment of planets \ud83d\ude09 all seem to play a role. Adding a touch of random variation (or chaos) brings some realism in the simulation. Why use a simulator ? \u2301 Many scenario-based simulators have been written in the past, like AIDA or the UVA/Padova T1DMS . In contrast, CGMSIM runs in real time like a \"serious game\". It requires time and dedication to reach its goal. It is not a matter of hours or days, but rather weeks or months. Many instances of the simulator can run on one computer, serving many users at a time, making team training possible. Healthcare Professionals - HCPs Unless you or your family member has T1D, it is hard to figure how treatment can be time-consuming, technically difficult or frustrating. Even without having to worry about the risk of long-term vascular complications or acute life-threatening hypoglycemia, early adopters of this simulator showed signs of treatment fatigue after a few weeks already. Living with incertainty 24/7, and facing reports of treatment \"success\" will teach some humility and empathy. Not all patients are equal... Every simulated patient can be defined in terms of weight, insulin sensitivity, amplitude of EGP variability. This website will describe step by step how to install and kickstart the simulation as an administrator, and how to use it as an end-user. Where is the source code ? \u2301 The source code and more technical details on how various scripts are excecuted and interact with each other can be found in the CGMSIM project's repository","title":"Home"},{"location":"#welcome-to-the-cgmsim-documentation","text":"","title":"Welcome to the CGMSIM documentation"},{"location":"#introduction","text":"This application is an interactive real time simulation of the effects of food and insulin analogs on the blood glucose of a patient with type 1 diabetes (T1D). Rather than blood glucose (BG) values, it displays a continuous glucose sensor (CGM) trace using Nightscout as visualization tool. This is what it looks like, in an accelerated view : Since even the most accurate physiological simulators can at best provide only an approximation of what happens in a living organism, the goal of this simulation is not even to try to match reality, but to provide a framework for practising, learning and/or teaching. The treatment goal in type 1 diabetes is to keep the BG or CGM curve values as close as possible to that of a healthy person. In realistic terms, it means 3.9 \u2013 10 mmol/l or 70-180 mg/dl for CGM curves. The Time In Range (TIR) should be at least 70%. Important Please understand that this simulation: cannot predict individual response to treatment cannot replace traditional patient/caregiver education does not depict 100% realistically human physiology This is work in progress, and all feedback is welcome !","title":"Introduction"},{"location":"#human-physiology","text":"To understand the mechanics of the simulation, a few things must be considered. After a meal, the absorption of carbohydrates from the gut will also increase the blood glucose. Since insulin replacement is administered subcutaneously and not directly into the hepatic portal vein, some of the ingested food will be absorbed into the main bloodstream directly, bypassing the liver. After a short delay, the CGM will reflect the increase of blood glucose. The endogenous glucose production (EGP) is mainly du to the liver release of glucose into the bloodstream. Either by releasing stores (glycogenolysis) or by synthesizing new glucose (neoglucogenesis). Various biological states, alcohol and hormones can affect EGP. As glucose is released into the blood stream, the blood glucose concentration increases. Physical exercise affects blood glucose in many ways. Short bouts of intense physical activity will trigger the release of adrenaline, which increases the EGP. In turn, the increased peripheral uptake of glucose in the muscle tissue will lower the blood glucose as physical activity continues. The same continues also during the post exercise phase, until the muscle glycogen stores are repleted. Mealtime insulins have a short duration of activity (DIA, ~3 hours), while long-acting insulin analogs are meant to be injected once or twice a day. Both will lower blood glucose and thus sensor glucose values. The intricate biological pathways affecting the blood glucose variations are difficult to replicate mathematically. The absorption of ingested food from the gut, the absorption of insulin from the subcutaneous tissue, the timing of exercise, the circadian rhythm, menstrual cycle, the moon phase and the alignment of planets \ud83d\ude09 all seem to play a role. Adding a touch of random variation (or chaos) brings some realism in the simulation.","title":"Human physiology"},{"location":"#why-use-a-simulator","text":"Many scenario-based simulators have been written in the past, like AIDA or the UVA/Padova T1DMS . In contrast, CGMSIM runs in real time like a \"serious game\". It requires time and dedication to reach its goal. It is not a matter of hours or days, but rather weeks or months. Many instances of the simulator can run on one computer, serving many users at a time, making team training possible. Healthcare Professionals - HCPs Unless you or your family member has T1D, it is hard to figure how treatment can be time-consuming, technically difficult or frustrating. Even without having to worry about the risk of long-term vascular complications or acute life-threatening hypoglycemia, early adopters of this simulator showed signs of treatment fatigue after a few weeks already. Living with incertainty 24/7, and facing reports of treatment \"success\" will teach some humility and empathy. Not all patients are equal... Every simulated patient can be defined in terms of weight, insulin sensitivity, amplitude of EGP variability. This website will describe step by step how to install and kickstart the simulation as an administrator, and how to use it as an end-user.","title":"Why use a simulator ?"},{"location":"#where-is-the-source-code","text":"The source code and more technical details on how various scripts are excecuted and interact with each other can be found in the CGMSIM project's repository","title":"Where is the source code ?"},{"location":"contact/","text":"Contact me ! \u2301 There are quite a few good reasons to contact me: Development ideas Integrating physical activity data from Apple Watch, Android Wear and other activity sensors into the model. Offering CGMSIM as a centralized service, so anyone could link a simulated patient to their own Nightscout page. Developing CGMSIM as a standalone Android or iOS app Interested in the CSII (insulin pump) features of the sim ? \ud83d\ude09 Create a new Nightscout branch, allowing easier long-acting insulin entries, heart rate or steps ? Displaying insulin activity ? Found a bug in the source code ? Squish it ! It took me a while to learn to write code, and I am sure a pro would smile nervously reading my scripts. If you have other suggestions or would like to contribute, feel free to contact me by email lsandini@gmail.com . Thank you ! Donate \u2301 Coffee ... \u2615\ufe0f This project was not funded in any way and was written completely during my free time. It required quite some coffee, staying up at night, testing the code on virtual machines and various Raspberry Pi's. During the initial testing phase, 10 Nightscout websites on hobby dynos were run simultaneously for my courageous medical students, colleagues and nurses who tested the simulation. Click the Donate button above to support my work, if you feel it was worth the effort. All donations will be used strictly for Nightscout hosting fees (and occasional coffee). Alternatively consider making a donation to Tidepool , the Nightscout Foundation , the JDRF or any charitable organisation of your choice !","title":"Contact me"},{"location":"contact/#contact-me","text":"There are quite a few good reasons to contact me: Development ideas Integrating physical activity data from Apple Watch, Android Wear and other activity sensors into the model. Offering CGMSIM as a centralized service, so anyone could link a simulated patient to their own Nightscout page. Developing CGMSIM as a standalone Android or iOS app Interested in the CSII (insulin pump) features of the sim ? \ud83d\ude09 Create a new Nightscout branch, allowing easier long-acting insulin entries, heart rate or steps ? Displaying insulin activity ? Found a bug in the source code ? Squish it ! It took me a while to learn to write code, and I am sure a pro would smile nervously reading my scripts. If you have other suggestions or would like to contribute, feel free to contact me by email lsandini@gmail.com . Thank you !","title":"Contact me !"},{"location":"contact/#donate","text":"Coffee ... \u2615\ufe0f This project was not funded in any way and was written completely during my free time. It required quite some coffee, staying up at night, testing the code on virtual machines and various Raspberry Pi's. During the initial testing phase, 10 Nightscout websites on hobby dynos were run simultaneously for my courageous medical students, colleagues and nurses who tested the simulation. Click the Donate button above to support my work, if you feel it was worth the effort. All donations will be used strictly for Nightscout hosting fees (and occasional coffee). Alternatively consider making a donation to Tidepool , the Nightscout Foundation , the JDRF or any charitable organisation of your choice !","title":"Donate"},{"location":"build/clone/","text":"Downloading the simulator \u2301 Cloning the repository \u2301 Log into your Ubuntu terminal, and then run this command : git clone https://github.com/lsandini/cgmsim.git That's it. A folder called cgmsim has been created for you and all the needed files are in there. If you'd like to run more simulators on the same machine, just run: git clone https://github.com/lsandini/cgmsim.git cgmsim2 ... and a separate folder called \"cgmsim2\" is created, identical to \"cgmsim\" Installing dependencies \u2301 Enter the installation directory of your choice with the cd command (cd = change directory): cd cgmsim or cd cgmsim2 ... or whatever your named your install folder. In your linux terminal, type: sudo bash install_dependencies.sh Your linux user password will be required. The script will once again launch the update of Ubuntu default packages, and install a fresh version of nodejs. The basic nodeJS version in Ubuntu Server 20.04, (updated on Oct. 15th 2021), is v10.19.0 on Raspberry Pi 3 or 4, and v12.21.0 on a DigitalOcean droplet. You might see warnings during the installation and it might take a little while. Disregard the warnings and just wait for the process to complete. Now we can move on to executing the interactive setup script , that will set the simulated T1D person's physical properties, then link this \"virtual patient\" to their own Nightscout website.","title":"Download"},{"location":"build/clone/#downloading-the-simulator","text":"","title":"Downloading the simulator"},{"location":"build/clone/#cloning-the-repository","text":"Log into your Ubuntu terminal, and then run this command : git clone https://github.com/lsandini/cgmsim.git That's it. A folder called cgmsim has been created for you and all the needed files are in there. If you'd like to run more simulators on the same machine, just run: git clone https://github.com/lsandini/cgmsim.git cgmsim2 ... and a separate folder called \"cgmsim2\" is created, identical to \"cgmsim\"","title":"Cloning the repository"},{"location":"build/clone/#installing-dependencies","text":"Enter the installation directory of your choice with the cd command (cd = change directory): cd cgmsim or cd cgmsim2 ... or whatever your named your install folder. In your linux terminal, type: sudo bash install_dependencies.sh Your linux user password will be required. The script will once again launch the update of Ubuntu default packages, and install a fresh version of nodejs. The basic nodeJS version in Ubuntu Server 20.04, (updated on Oct. 15th 2021), is v10.19.0 on Raspberry Pi 3 or 4, and v12.21.0 on a DigitalOcean droplet. You might see warnings during the installation and it might take a little while. Disregard the warnings and just wait for the process to complete. Now we can move on to executing the interactive setup script , that will set the simulated T1D person's physical properties, then link this \"virtual patient\" to their own Nightscout website.","title":"Installing dependencies"},{"location":"build/kickstart/","text":"Starting the Simulation \u2301 Scheduling tasks \u2301 In Linux, a service called cron will execute the commands that you have specified in your settings. I added a crontab.txt sample file to the Github repository and to your install folder for reference. It should look like this: SHELL=/bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin 0 */6 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash perlin.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash get-all.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash upload-cgmsim.sh #30 23 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash surprise.sh You will need to edit this lines to match your personal settings, then copy-paste the edited lines in your own crontab. I suggest you first copy-pase these lines into notepad or the text editor of your choice in Windows or MacOS. Replace \"MYUSERNAME\" with your own Linux username ! Replace \"cgmsim\" with your own CGMSIM installation folder name ! Then, in your Linux terminal, type: crontab -e Select nano (or vi) as your favourite text editor. You can now delete the whole content of the crontab file, then copy-paste your own modified lines from your windows/MacOS text editor into your crontab. Close crontab by pressing CRTL + X, when prompted to save the new file, enter Y. The first line reinitialises the perlin noise generator every 6 hours. The second line launches the downloading process of previous SGV data, treatments, etc, every 5 minutes. The third line launches the calculations and uploads the new computed sgv values to NS, every 5 minutes. The fourth line is commented out with a # sign by default. If you remove the # sign, CGMSIM will compute at 11:30 PM the total amount of carbs eaten during the day, and issue a meal completing the 200g grams target for the 24h period, without mealtime insulin. The sample file contains 2 more lines, that are commented out. They allow to use the simulator as a CSII (insulin pump) simulator and link the simulator to openAPS, Loop, FreeAPS, AndroidAPS, etc... This requires other modifications to the code not presented here. I'll add details later on request. Hosting many simulators on one Linux machine ? In case your Raspberry Pi is hosting many instances of the simulator, a set of 4 lines are added after the previous ones, since the crontab will orchestrate all the simulators in one file. Kickstart the simulation ! \u2301 It's time to upload your first Sensor Glucose Values (SGVs) to your Nightscout website. This way CGMSIM will have a starting point for its first calculations. In your terminal, type : node kickstart-simulation.js In a second or two, your Nightscout website should display 3 SGVs of 5 mmol/l or 80 mg/dl. Yay ! \ud83d\ude03 It might take up to 5-10 minutes for the next value to appear, but without intervention from you, the glucose level will climb slowly due to the endogenous glucose production (EGP), until it reaches 22.2 mmol/l or 400 mg/dl. (A low limit of 2.2 mmol/l or 40 mg/dl has also set, to avoid interruptions in the Nightscout SGV curve). You are now in charge of your virtual T1D patient, who needs food and insulin to survive. Next, we'll see how to declare meals and insulins in Nightscout, and how to review the treatment results .","title":"Kickstart"},{"location":"build/kickstart/#starting-the-simulation","text":"","title":"Starting the Simulation"},{"location":"build/kickstart/#scheduling-tasks","text":"In Linux, a service called cron will execute the commands that you have specified in your settings. I added a crontab.txt sample file to the Github repository and to your install folder for reference. It should look like this: SHELL=/bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin 0 */6 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash perlin.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash get-all.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash upload-cgmsim.sh #30 23 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash surprise.sh You will need to edit this lines to match your personal settings, then copy-paste the edited lines in your own crontab. I suggest you first copy-pase these lines into notepad or the text editor of your choice in Windows or MacOS. Replace \"MYUSERNAME\" with your own Linux username ! Replace \"cgmsim\" with your own CGMSIM installation folder name ! Then, in your Linux terminal, type: crontab -e Select nano (or vi) as your favourite text editor. You can now delete the whole content of the crontab file, then copy-paste your own modified lines from your windows/MacOS text editor into your crontab. Close crontab by pressing CRTL + X, when prompted to save the new file, enter Y. The first line reinitialises the perlin noise generator every 6 hours. The second line launches the downloading process of previous SGV data, treatments, etc, every 5 minutes. The third line launches the calculations and uploads the new computed sgv values to NS, every 5 minutes. The fourth line is commented out with a # sign by default. If you remove the # sign, CGMSIM will compute at 11:30 PM the total amount of carbs eaten during the day, and issue a meal completing the 200g grams target for the 24h period, without mealtime insulin. The sample file contains 2 more lines, that are commented out. They allow to use the simulator as a CSII (insulin pump) simulator and link the simulator to openAPS, Loop, FreeAPS, AndroidAPS, etc... This requires other modifications to the code not presented here. I'll add details later on request. Hosting many simulators on one Linux machine ? In case your Raspberry Pi is hosting many instances of the simulator, a set of 4 lines are added after the previous ones, since the crontab will orchestrate all the simulators in one file.","title":"Scheduling tasks"},{"location":"build/kickstart/#kickstart-the-simulation","text":"It's time to upload your first Sensor Glucose Values (SGVs) to your Nightscout website. This way CGMSIM will have a starting point for its first calculations. In your terminal, type : node kickstart-simulation.js In a second or two, your Nightscout website should display 3 SGVs of 5 mmol/l or 80 mg/dl. Yay ! \ud83d\ude03 It might take up to 5-10 minutes for the next value to appear, but without intervention from you, the glucose level will climb slowly due to the endogenous glucose production (EGP), until it reaches 22.2 mmol/l or 400 mg/dl. (A low limit of 2.2 mmol/l or 40 mg/dl has also set, to avoid interruptions in the Nightscout SGV curve). You are now in charge of your virtual T1D patient, who needs food and insulin to survive. Next, we'll see how to declare meals and insulins in Nightscout, and how to review the treatment results .","title":"Kickstart the simulation !"},{"location":"build/linux/","text":"Installing Linux Ubuntu \u2301 Two major options are available. A cloud-based solution like Digital Ocean or MVPS . They provide a virtual machines that you can create in seconds with just a few clicks, for a few euros/month. A computer running Linux at home. Raspberry Pi \u2301 I recommend using a Raspberry Pi (RPi) micro-computer, as it is the cheapest and most energy efficient solution. I currently host 10 simulated patients on a headless RPi3, without any monthly cost other than my broadband internet subscription. The price of a Raspberry Pi Zero is less than 10 EUR, and if you prefer a more robust solution a Raspberry Pi 4 starter kit including a charger and a preloaded SD card, it costs less than 100 euros. You don't need to connect your RPi to a monitor, a keyboard or a mouse. Your installation won't even have a desktop interface. As soon as your linux computer is connected to your home network with LAN or WLAN, you will need a separate computer in order to login into your Linux computer remotely through the network. Linux Ubuntu is completely free and comes with all the software you need. Ubuntu Server is a lightweight version, with no desktop environment. Here are the full instructions for installing Ubuntu Server on a Raspberry 2, 3 or 4 . All the steps are described above in detail, and it will also take you some time, grab a cup of \u2615\ufe0f and be patient. Use the Raspberry Pi imager Tool to create the SD card with the onboard operating system Edit the network-config file so that your Rpi finds your WLAN Boot your Linux machine, (wait 3-4 minutes!) Locate it on your network, determine its IP address Your username is ubuntu and password ubuntu . Connect to your Rpi with a SSH client like Putty . You will be prompted to change your password on first login attempt . Create a regular new user with sudo privileges. and reboot. When you finally login as the new user, remember to update/upgrade all packages, so that your fresh installation is up-to-date. In your linux terminal, type : sudo apt update && sudo apt upgrade You are ready to download and deploy CGMSIM , yay ! \ud83d\ude05","title":"Linux/Ubuntu"},{"location":"build/linux/#installing-linux-ubuntu","text":"Two major options are available. A cloud-based solution like Digital Ocean or MVPS . They provide a virtual machines that you can create in seconds with just a few clicks, for a few euros/month. A computer running Linux at home.","title":"Installing Linux Ubuntu"},{"location":"build/linux/#raspberry-pi","text":"I recommend using a Raspberry Pi (RPi) micro-computer, as it is the cheapest and most energy efficient solution. I currently host 10 simulated patients on a headless RPi3, without any monthly cost other than my broadband internet subscription. The price of a Raspberry Pi Zero is less than 10 EUR, and if you prefer a more robust solution a Raspberry Pi 4 starter kit including a charger and a preloaded SD card, it costs less than 100 euros. You don't need to connect your RPi to a monitor, a keyboard or a mouse. Your installation won't even have a desktop interface. As soon as your linux computer is connected to your home network with LAN or WLAN, you will need a separate computer in order to login into your Linux computer remotely through the network. Linux Ubuntu is completely free and comes with all the software you need. Ubuntu Server is a lightweight version, with no desktop environment. Here are the full instructions for installing Ubuntu Server on a Raspberry 2, 3 or 4 . All the steps are described above in detail, and it will also take you some time, grab a cup of \u2615\ufe0f and be patient. Use the Raspberry Pi imager Tool to create the SD card with the onboard operating system Edit the network-config file so that your Rpi finds your WLAN Boot your Linux machine, (wait 3-4 minutes!) Locate it on your network, determine its IP address Your username is ubuntu and password ubuntu . Connect to your Rpi with a SSH client like Putty . You will be prompted to change your password on first login attempt . Create a regular new user with sudo privileges. and reboot. When you finally login as the new user, remember to update/upgrade all packages, so that your fresh installation is up-to-date. In your linux terminal, type : sudo apt update && sudo apt upgrade You are ready to download and deploy CGMSIM , yay ! \ud83d\ude05","title":"Raspberry Pi"},{"location":"build/nightscout/","text":"Nightscout \u2301 In order to use this simulator, you'll need an instance of Nightscout (NS). Nightscout is hosted on Heroku, a cloud-based platform. You don't have to worry about running your own server, registering domains, making backups, losing internet connections, etc... Nightscout requires a database to run, where all the food and insulin \"treatments\" are stored, along with the sensor glucose values. This \"Mongo\" database must be created and linked to your Nightscout website. Please go over to Nightscout's installation guide for new users . The whole installation is well explained, step by step. Make sure to follow all the steps and perform this installation first. It will take you some time, probably about 60 minutes. Write down the URL of your Nightscout website and the password or API secret (or password, for example \"MYAPISECRET1\" as in the following example). Running Nightscout on Heroku on \"free dynos\" is free of charge. However, if the amount of work done on the server exceeds a certain limit, your \"free dynos\" will be exhausted and your site will stop working until the following month. Upgrading your account to \"hobby dynos\" (7 USD or 6 EUR / month) means your site will run without interruptions.","title":"Nightscout"},{"location":"build/nightscout/#nightscout","text":"In order to use this simulator, you'll need an instance of Nightscout (NS). Nightscout is hosted on Heroku, a cloud-based platform. You don't have to worry about running your own server, registering domains, making backups, losing internet connections, etc... Nightscout requires a database to run, where all the food and insulin \"treatments\" are stored, along with the sensor glucose values. This \"Mongo\" database must be created and linked to your Nightscout website. Please go over to Nightscout's installation guide for new users . The whole installation is well explained, step by step. Make sure to follow all the steps and perform this installation first. It will take you some time, probably about 60 minutes. Write down the URL of your Nightscout website and the password or API secret (or password, for example \"MYAPISECRET1\" as in the following example). Running Nightscout on Heroku on \"free dynos\" is free of charge. However, if the amount of work done on the server exceeds a certain limit, your \"free dynos\" will be exhausted and your site will stop working until the following month. Upgrading your account to \"hobby dynos\" (7 USD or 6 EUR / month) means your site will run without interruptions.","title":"Nightscout"},{"location":"build/overview/","text":"Installation overview \u2301 You'll need 2 separate things in order to install and run your own instance of the simulator. Nightscout is the user interface, and CGMSIM is the \"virtual patient\". There is no current plan to melt the 2 projects. Nightscout \u2301 In order to use this simulator, you'll need an instance of Nightscout (NS). If you are not familiar with NS, go over to Nightscout new users and be sure to follow all the steps and perform this installation first . Make sure to write down the URL and the API secret (or password, for example \"MYAPISECRET1\"). The CGMSIM simulator itself \u2301 The simulator itself works in a Linux Ubuntu 20.04 LTS environment. You'll need a computer (or a virtual machine) running Ubuntu in order to complete the CGMSIM installation. If you don't have any experience, this will be a good opportunity to learn. Basic Linux use is easier than you think. You can either rent a cloud-based Linux computer for a few euros/month, or rather run Linux at home on a Raspberry Pi . The next steps are described separately and involve: downloading all the files from a Github repository installing the dependencies necessary for running the simulator setting up the environment variables kickstarting the simulator scheduling the repetitive tasks Using CGMSIM in a browser \u2301 Nightscout is broadly compatible with a wide range of browsers, both on desktop/laptop computers and handheld devices. The use of CGMSIM happens is a browser, and it doesn't require any app installation by its user. So you can be the administrator of 10 Nightscout websites, host 10 instances of CGM sim on a single Linux computer, and distribute 10 simulated patients to your team for example.","title":"Overview"},{"location":"build/overview/#installation-overview","text":"You'll need 2 separate things in order to install and run your own instance of the simulator. Nightscout is the user interface, and CGMSIM is the \"virtual patient\". There is no current plan to melt the 2 projects.","title":"Installation overview"},{"location":"build/overview/#nightscout","text":"In order to use this simulator, you'll need an instance of Nightscout (NS). If you are not familiar with NS, go over to Nightscout new users and be sure to follow all the steps and perform this installation first . Make sure to write down the URL and the API secret (or password, for example \"MYAPISECRET1\").","title":"Nightscout"},{"location":"build/overview/#the-cgmsim-simulator-itself","text":"The simulator itself works in a Linux Ubuntu 20.04 LTS environment. You'll need a computer (or a virtual machine) running Ubuntu in order to complete the CGMSIM installation. If you don't have any experience, this will be a good opportunity to learn. Basic Linux use is easier than you think. You can either rent a cloud-based Linux computer for a few euros/month, or rather run Linux at home on a Raspberry Pi . The next steps are described separately and involve: downloading all the files from a Github repository installing the dependencies necessary for running the simulator setting up the environment variables kickstarting the simulator scheduling the repetitive tasks","title":"The CGMSIM simulator itself"},{"location":"build/overview/#using-cgmsim-in-a-browser","text":"Nightscout is broadly compatible with a wide range of browsers, both on desktop/laptop computers and handheld devices. The use of CGMSIM happens is a browser, and it doesn't require any app installation by its user. So you can be the administrator of 10 Nightscout websites, host 10 instances of CGM sim on a single Linux computer, and distribute 10 simulated patients to your team for example.","title":"Using CGMSIM in a browser"},{"location":"build/setupscript/","text":"Setting up your personal environment \u2301 The \"environment\" means the details of the simulated subject, and the Nightscout website URL and API secret. They are centralized and stored in the simulator's folder, in a file called .env. This file's contents are later called from various scripts. Creating this file is simplified by launching this interactive this script: bash install_env.sh You will be presented with the 9 following questions: What is the weight in kg ? What is the longest absorption time for slowly absorbing meals (in minutes) ? What is the peak action time (e.g. 55 min for Fiasp, 75 min for Novorapid) ? What is the total duration of insulin action or DIA (e.g. 5 hours for Fiasp or Novorapid) ? What is your typical ISF ? What is your typical CR (carb ratio, in g/U)? What is your \"MYNIGHTSCOUT\" part of your Nightscout site URL? (i.e. https://MYNIGHTSCOUT.herokuapp.com)? What is your Nightscout API_SECRET (i.e. myplaintextsecret; It should be at least 12 characters long)? When all questions are answered, a (hidden) file named .env is created. If necessary, to verify that the .env file has been created correctly, type the following command and the contents of the file will be displayed. cat .env Editing the .env file \u2301 If you have made errors when answering the 9 questions, you can edit the file by typing: nano .env After editing the .env file, close nano by pressing CTRL+X, and when prompted to save the modifications, press Y. Finally, and since the perlin noise generator runs automatically but only once a day, it will be launched for the first time at the end of this script. Now the environment is set, we still need to kickstart the simulation, and set timers to make sure all the scripts are run every 5 minutes .","title":"Setup script"},{"location":"build/setupscript/#setting-up-your-personal-environment","text":"The \"environment\" means the details of the simulated subject, and the Nightscout website URL and API secret. They are centralized and stored in the simulator's folder, in a file called .env. This file's contents are later called from various scripts. Creating this file is simplified by launching this interactive this script: bash install_env.sh You will be presented with the 9 following questions: What is the weight in kg ? What is the longest absorption time for slowly absorbing meals (in minutes) ? What is the peak action time (e.g. 55 min for Fiasp, 75 min for Novorapid) ? What is the total duration of insulin action or DIA (e.g. 5 hours for Fiasp or Novorapid) ? What is your typical ISF ? What is your typical CR (carb ratio, in g/U)? What is your \"MYNIGHTSCOUT\" part of your Nightscout site URL? (i.e. https://MYNIGHTSCOUT.herokuapp.com)? What is your Nightscout API_SECRET (i.e. myplaintextsecret; It should be at least 12 characters long)? When all questions are answered, a (hidden) file named .env is created. If necessary, to verify that the .env file has been created correctly, type the following command and the contents of the file will be displayed. cat .env","title":"Setting up your personal environment"},{"location":"build/setupscript/#editing-the-env-file","text":"If you have made errors when answering the 9 questions, you can edit the file by typing: nano .env After editing the .env file, close nano by pressing CTRL+X, and when prompted to save the modifications, press Y. Finally, and since the perlin noise generator runs automatically but only once a day, it will be launched for the first time at the end of this script. Now the environment is set, we still need to kickstart the simulation, and set timers to make sure all the scripts are run every 5 minutes .","title":"Editing the .env file"},{"location":"model/food/","text":"Modeling the absorption of Carbs from the gut \u2301 There are many complicated and more or less precise published models of carb absorption, but for the purpose of this simulation, a simple bilinear model like the one found in the book Think Like a Pancreas by Gary Scheiner, and used in Perceptus' Glucodyn simulator will do for now. So if the total absorption time (AT) is 4 hours, the absorption rate increases linearly until it reaches its peak, then decreases linearly to the end. The surface area of the triangle represents the amount of ingested carbs (the \"Dose\"). The peak absorption rate is \"h\". This can be represented with the equivalent following equations: \\[ Dose = {AT \\times h \\over 2} \\] \\[ h = {{2 \\times Dose } \\over AT} \\] Let's get rid of the \"h\", and describe the Carbs Absorption Rate (CAR) as a function of time : In the increasing phase of absorption : \\[ CAR(t) = {2 \\times h} \\times {t \\over AT }\\text{ } => \\text{ } { 4 \\times Dose \\over AT^2} \\times t \\] - And in the decreasing phase: \\[ CAR(t) = {2 \\times h} \\times {(1 - t) \\over AT } \\text{ } => \\text{ } { 4 \\times Dose \\over AT} \\times {(1 - {t \\over AT})} \\] Mixed meals and Snacks To make the absorption of carbs more realistic, the first 40 g of each meal will always be fast absorbing . For bigger meals, the excess carbs over 40g are divided in fast and slow absorbing parts. The ratio of fast absorbing carbs is randomly computed to be 10-40 % of the carb excess . So for a meal declared as 100g, the first 40 are fast carbs. The remaining 60g will be divided randomly in slow and fast parts. You'll find out sooner or later. In the current version of the simulator, fast carbs will be absorbed according to the bilinear model mentioned above, over a period of time of one hour . The remaining (slow) carbs are absorbed in a similar bilinear fashion, but over a period of 4 hours. This can be set in the interactive setup script during installation.","title":"Carb absorption from the gut"},{"location":"model/food/#modeling-the-absorption-of-carbs-from-the-gut","text":"There are many complicated and more or less precise published models of carb absorption, but for the purpose of this simulation, a simple bilinear model like the one found in the book Think Like a Pancreas by Gary Scheiner, and used in Perceptus' Glucodyn simulator will do for now. So if the total absorption time (AT) is 4 hours, the absorption rate increases linearly until it reaches its peak, then decreases linearly to the end. The surface area of the triangle represents the amount of ingested carbs (the \"Dose\"). The peak absorption rate is \"h\". This can be represented with the equivalent following equations: \\[ Dose = {AT \\times h \\over 2} \\] \\[ h = {{2 \\times Dose } \\over AT} \\] Let's get rid of the \"h\", and describe the Carbs Absorption Rate (CAR) as a function of time : In the increasing phase of absorption : \\[ CAR(t) = {2 \\times h} \\times {t \\over AT }\\text{ } => \\text{ } { 4 \\times Dose \\over AT^2} \\times t \\] - And in the decreasing phase: \\[ CAR(t) = {2 \\times h} \\times {(1 - t) \\over AT } \\text{ } => \\text{ } { 4 \\times Dose \\over AT} \\times {(1 - {t \\over AT})} \\] Mixed meals and Snacks To make the absorption of carbs more realistic, the first 40 g of each meal will always be fast absorbing . For bigger meals, the excess carbs over 40g are divided in fast and slow absorbing parts. The ratio of fast absorbing carbs is randomly computed to be 10-40 % of the carb excess . So for a meal declared as 100g, the first 40 are fast carbs. The remaining 60g will be divided randomly in slow and fast parts. You'll find out sooner or later. In the current version of the simulator, fast carbs will be absorbed according to the bilinear model mentioned above, over a period of time of one hour . The remaining (slow) carbs are absorbed in a similar bilinear fashion, but over a period of 4 hours. This can be set in the interactive setup script during installation.","title":"Modeling the absorption of Carbs from the gut"},{"location":"model/la-agonists/","text":"Modeling the activities of the long-acting agonists \u2301 For detemir and glargine instead, mathematical models are missing. Based on clamp studies in T1D, the intra-individual day-to-day variation is an important factor affecting the predictability of a single repeated dose. Moreover, the inter-individual variability makes modeling even more a challenge. Even with the best curve-fitting tools, no \u201cglobal model\u201d was achieved. Since the goal is not to make a perfect model, I first decided to use a sinusoidal curve to model detemir, and a half-ellipse for glargine. The obvious reasons are that the mathematics of those functions are simple \ud83d\ude2c Using biexponential models \u2301 While the very basic mathematical models of long acting insulin analogs are good enough for training (see below \"old models\"), getting closer to published \"curves\" and physiological activity is necessary. I decided to adapt the biexponential model used for mealtime insulins to long-acting insulin agonists. The activity of detemir and glargine-U100 depend on the absolute amount (units), but also on the dose in relation to the patient's weight (U/kg). Also, the peak of action is achieved at different timepoints. The DIA of detemir is more variable and dose dependent than that of glargine. Models for glargine U300 and degludec will be added later on, if anyone finds them useful. Bi-exponential models For detemir, the duration of action is 14h + (24* dose/weight), and the peak is at duration/3. For glargine U100, the duration of action is 22h + (12* dose/weight), and the peak is at duration/2.5. Here are some activity curves as depicted in many publications. Notice that the curve colours are different, and some of the activity curves seem to derived from steady-state euglycemic clamps, not from single injection clamps : OLD MODELS ! \u2301 Important The old models for detemir and glargine-U100 are still in use in the current version of the simulator, so here is the technical explanation for those still using them. They will be deprecated after the new model have been thoroughly tested. Modeling Levemir (Levemir\u00ae) \u2301 The clamp studies show that the dose-response curve is linear. With increasing doses from 0.1U/kg to 1.6U/kg, the total activity, or area under the curve (AUC) of the glucose infusion rate (GIR) needed to maintain normal blood glucose, follows a straight line. However, the DIA seems related to the dose/kg, so that had to be considered in the model. The AUC precisely reflects the injected number of units and is identical for 12U @0.1U/kg and 12U @0.4U/kg. However, when increasing the do dose from 12U @0.4U/kg to 24U @0.4U/kg, you can see that the DIA increases: Duration of Levemir action = 16 + (20 * U/weight) So for 0.1 U/kg, the duration of action is 16 + (20 * 0.1) = 18 hours, and for 0.4U/kg, the DIA is 16 + (20 * 0.4) = 24 hours. And the model itself is: y = units * (Math.PI/(duration * 2)) * (Math.sin(time * Math.PI/duration)); (for the biexponential model in detemir2.js, the duration of activity = (14 + (24 * dose/weight)), and the peak is duration/3. Modeling Glargine (Lantus\u00ae, Abasaglar\u00ae, Toujeo\u00ae) \u2301 For the time being, only glargine-U100 is basically modeled here, with a DIA of 27 hours. Again, the AUC reflects the injected dose. I \u201cchopped\u201d the equation in little bits fo clarity : b = (2 * basalDose)/(Math.PI * duration); // duration is 27 hours x = (Date.now() - time0)/(60 * 60 * 1000); //time0 is the time of injection g = x - (duration / 2); gg = Math.pow(g,2); h = duration / 2; hh= Math.pow(h,2); z = (x - gg) / hh; bb = Math.pow(b,2); y = 2 * Math.sqrt(bb * (1+z)); // where y is the activity of glargine over time (for the biexponential model in glargine2.js, the duration of activity = (22 + (12 * dose/weight)), and the peak is duration/2.5). Here is a visual aid illustrating the differences between the activity curves of detemir and glargine at different doses:","title":"Long-acting insulin Agonists"},{"location":"model/la-agonists/#modeling-the-activities-of-the-long-acting-agonists","text":"For detemir and glargine instead, mathematical models are missing. Based on clamp studies in T1D, the intra-individual day-to-day variation is an important factor affecting the predictability of a single repeated dose. Moreover, the inter-individual variability makes modeling even more a challenge. Even with the best curve-fitting tools, no \u201cglobal model\u201d was achieved. Since the goal is not to make a perfect model, I first decided to use a sinusoidal curve to model detemir, and a half-ellipse for glargine. The obvious reasons are that the mathematics of those functions are simple \ud83d\ude2c","title":"Modeling the activities of the long-acting agonists"},{"location":"model/la-agonists/#using-biexponential-models","text":"While the very basic mathematical models of long acting insulin analogs are good enough for training (see below \"old models\"), getting closer to published \"curves\" and physiological activity is necessary. I decided to adapt the biexponential model used for mealtime insulins to long-acting insulin agonists. The activity of detemir and glargine-U100 depend on the absolute amount (units), but also on the dose in relation to the patient's weight (U/kg). Also, the peak of action is achieved at different timepoints. The DIA of detemir is more variable and dose dependent than that of glargine. Models for glargine U300 and degludec will be added later on, if anyone finds them useful. Bi-exponential models For detemir, the duration of action is 14h + (24* dose/weight), and the peak is at duration/3. For glargine U100, the duration of action is 22h + (12* dose/weight), and the peak is at duration/2.5. Here are some activity curves as depicted in many publications. Notice that the curve colours are different, and some of the activity curves seem to derived from steady-state euglycemic clamps, not from single injection clamps :","title":"Using biexponential models"},{"location":"model/la-agonists/#old-models","text":"Important The old models for detemir and glargine-U100 are still in use in the current version of the simulator, so here is the technical explanation for those still using them. They will be deprecated after the new model have been thoroughly tested.","title":"OLD MODELS !"},{"location":"model/la-agonists/#modeling-levemir-levemir","text":"The clamp studies show that the dose-response curve is linear. With increasing doses from 0.1U/kg to 1.6U/kg, the total activity, or area under the curve (AUC) of the glucose infusion rate (GIR) needed to maintain normal blood glucose, follows a straight line. However, the DIA seems related to the dose/kg, so that had to be considered in the model. The AUC precisely reflects the injected number of units and is identical for 12U @0.1U/kg and 12U @0.4U/kg. However, when increasing the do dose from 12U @0.4U/kg to 24U @0.4U/kg, you can see that the DIA increases: Duration of Levemir action = 16 + (20 * U/weight) So for 0.1 U/kg, the duration of action is 16 + (20 * 0.1) = 18 hours, and for 0.4U/kg, the DIA is 16 + (20 * 0.4) = 24 hours. And the model itself is: y = units * (Math.PI/(duration * 2)) * (Math.sin(time * Math.PI/duration)); (for the biexponential model in detemir2.js, the duration of activity = (14 + (24 * dose/weight)), and the peak is duration/3.","title":"Modeling Levemir (Levemir\u00ae)"},{"location":"model/la-agonists/#modeling-glargine-lantus-abasaglar-toujeo","text":"For the time being, only glargine-U100 is basically modeled here, with a DIA of 27 hours. Again, the AUC reflects the injected dose. I \u201cchopped\u201d the equation in little bits fo clarity : b = (2 * basalDose)/(Math.PI * duration); // duration is 27 hours x = (Date.now() - time0)/(60 * 60 * 1000); //time0 is the time of injection g = x - (duration / 2); gg = Math.pow(g,2); h = duration / 2; hh= Math.pow(h,2); z = (x - gg) / hh; bb = Math.pow(b,2); y = 2 * Math.sqrt(bb * (1+z)); // where y is the activity of glargine over time (for the biexponential model in glargine2.js, the duration of activity = (22 + (12 * dose/weight)), and the peak is duration/2.5). Here is a visual aid illustrating the differences between the activity curves of detemir and glargine at different doses:","title":"Modeling Glargine (Lantus\u00ae, Abasaglar\u00ae, Toujeo\u00ae)"},{"location":"model/liver/","text":"Modeling the Endogenous Glucose Production (EGP) by the liver \u2301 In an adult person with T1D, the EGP is about 100-120mg/kg/h, which means 8-10g/h for a 80kg person. Every day, the liver releases 200-240g of carbs into the bloodstream. The EGP is significantly affected by the insulin activity, since in the repleted and rested state, insulin decreases the liver glucose production more than it increases peripheral glucose uptake. Moreover, other factors like the ingestion of alcohol, an adrenaline rush, prolonged fasting, will significantly increase or decrease the EGP. The EGP is modeled here as a simple sinusoidal function. If the ISF is 2mmol/l/U and the CR is 10g/U, then the Carb Factor (CF) is 2mmol/l/10g. Since 10g are produced per hour (on average), the increase in BG due to the liver glucose production is 2mmol/l/h or 0.167 mmol/l/5min. Multiplying this by a sinusoidal value oscillating from 0.8 to 1.2 (\u00b1 20 %) will make the impact on BG vary from 0.13 to 0.20 mmol/l/5min. The sinus cycle starts at midnight, is maximal at 6 AM (mimicking a dawn effect or \"liver dump\"), back to baseline at 12 AM, minimal at 6 PM (mimicking the effect of light physical activity), and back to baseline at midnight. In children, the cycle can be quite different, and the model proposed here apply to \"most\" adults.","title":"Endogenous Glucose production"},{"location":"model/liver/#modeling-the-endogenous-glucose-production-egp-by-the-liver","text":"In an adult person with T1D, the EGP is about 100-120mg/kg/h, which means 8-10g/h for a 80kg person. Every day, the liver releases 200-240g of carbs into the bloodstream. The EGP is significantly affected by the insulin activity, since in the repleted and rested state, insulin decreases the liver glucose production more than it increases peripheral glucose uptake. Moreover, other factors like the ingestion of alcohol, an adrenaline rush, prolonged fasting, will significantly increase or decrease the EGP. The EGP is modeled here as a simple sinusoidal function. If the ISF is 2mmol/l/U and the CR is 10g/U, then the Carb Factor (CF) is 2mmol/l/10g. Since 10g are produced per hour (on average), the increase in BG due to the liver glucose production is 2mmol/l/h or 0.167 mmol/l/5min. Multiplying this by a sinusoidal value oscillating from 0.8 to 1.2 (\u00b1 20 %) will make the impact on BG vary from 0.13 to 0.20 mmol/l/5min. The sinus cycle starts at midnight, is maximal at 6 AM (mimicking a dawn effect or \"liver dump\"), back to baseline at 12 AM, minimal at 6 PM (mimicking the effect of light physical activity), and back to baseline at midnight. In children, the cycle can be quite different, and the model proposed here apply to \"most\" adults.","title":"Modeling the Endogenous Glucose Production (EGP) by the liver"},{"location":"model/mealtime/","text":"Modeling the activity of mealtime insulins \u2301 While simple \"bilinear\" models have been used in the past, precise modeling has been done for aspart and lispro. The biexponential model by Dragan Maksimovic described here fits the published data from clamp studies. Dragan has made a tremendous work with this model, adopted now by all DIY artificial pancreas algorithms. A very good explanation of this various models in given in the openAPS documentation . I use model to this compute the activity of each mealtime insulin dose. I selected a time-to-peak of 60 minutes and a duration of insulin action (DIA) of 300 min (5 hours!) as default. Mealtime insulins have a duration of activity closer to 180 min or 3 hours. For faster insulin aspart (Fiasp\u00ae), you may want to choose an even shorter time-to-peak and DIA. You will be able to set your own time-to-peak and DIA values during the interactive setup, along with other \"patient-related\" variables. In simple terms, this means that the effect of insulin will increase from the moment of injection until it reaches a maximum \"peak\", and then decrease to 0 at the end of the DIA. Parameters \u2301 td = duration duration of insulin activity (DIA) tp = peak activity time \\[ \\text{Time constant of exponential decay = } \\tau = { tp \\times {{(1-tp/td)}\\over {(1-2 \\times tp/td)} } } \\] \\[ \\text{Rise time factor = } a = { 2 \\times {\\tau \\over td}} \\] \\[ \\text{Auxiliary scale factor = } S = {1 \\over {(1 -a) + (1 + a)\\times {\\exp({-t\\over \\tau})}}} \\] \\[ \\text{Insulin activity curve = } Ia(t) = {S \\over \\tau^2} \\times t \\times {(1 - {t \\over td})} \\times \\exp({-t \\over \\tau}) \\] As can be seen on the picture below, with a DIA of 300 min and tp = 55 min (dark orange curves), 80\\% of the insulin has been absorbed and its activity has declined to 10\\% of its peak value after 180 min:","title":"Mealtime Insulin"},{"location":"model/mealtime/#modeling-the-activity-of-mealtime-insulins","text":"While simple \"bilinear\" models have been used in the past, precise modeling has been done for aspart and lispro. The biexponential model by Dragan Maksimovic described here fits the published data from clamp studies. Dragan has made a tremendous work with this model, adopted now by all DIY artificial pancreas algorithms. A very good explanation of this various models in given in the openAPS documentation . I use model to this compute the activity of each mealtime insulin dose. I selected a time-to-peak of 60 minutes and a duration of insulin action (DIA) of 300 min (5 hours!) as default. Mealtime insulins have a duration of activity closer to 180 min or 3 hours. For faster insulin aspart (Fiasp\u00ae), you may want to choose an even shorter time-to-peak and DIA. You will be able to set your own time-to-peak and DIA values during the interactive setup, along with other \"patient-related\" variables. In simple terms, this means that the effect of insulin will increase from the moment of injection until it reaches a maximum \"peak\", and then decrease to 0 at the end of the DIA.","title":"Modeling the activity of mealtime insulins"},{"location":"model/mealtime/#parameters","text":"td = duration duration of insulin activity (DIA) tp = peak activity time \\[ \\text{Time constant of exponential decay = } \\tau = { tp \\times {{(1-tp/td)}\\over {(1-2 \\times tp/td)} } } \\] \\[ \\text{Rise time factor = } a = { 2 \\times {\\tau \\over td}} \\] \\[ \\text{Auxiliary scale factor = } S = {1 \\over {(1 -a) + (1 + a)\\times {\\exp({-t\\over \\tau})}}} \\] \\[ \\text{Insulin activity curve = } Ia(t) = {S \\over \\tau^2} \\times t \\times {(1 - {t \\over td})} \\times \\exp({-t \\over \\tau}) \\] As can be seen on the picture below, with a DIA of 300 min and tp = 55 min (dark orange curves), 80\\% of the insulin has been absorbed and its activity has declined to 10\\% of its peak value after 180 min:","title":"Parameters"},{"location":"model/overview/","text":"Overview \u2301 Here you'll find details about the sequence of events happening in the simulation. When your simulation has been kickstarted , 3 sensor glucose values of 5 mmol/l or 90 md/dl (sgv) have been uploaded to your Nightscout (NS) website. The \"inner clock\" of the computer hosting the simulation will trigger the execution of various scripts at regular intervals. Sequence of events gather previous sensor glucose values gather previous \"treatments\" (food and/or insulin doses) compute the endogenous glucose production (EGP) compute a random variability factor (RND) compute the global impact of treatments, EGP and RND on glucose values (delta) compute the direction of arrows based on the previous deltas upload a new sensor glucose value and arrow to NS every 5 minutes repeat the cycle indefinitely ISF, CR, CF, BGI \u2301 The Insulin Sensitivity Factor (ISF) represents the impact on BG attributable to the effect of 1 unit of insulin. Its measurement unit is mmol/l/U or mg/dl/U. So an ISF of 2 means that the blood sugar concentration decreases 2 mmol/l for each given insulin unit. The Carb Ratio (CR) represents the amount of insulin needed to counteract a defined amount of carbs. It is expressed as g/U. For example if 10g of carbs are counteracted by 1 unit of mealtime insulin, the CR is 10 g/U. The Carb (sensitivity) Factor (CF) represents the impact of a defined amount of absorbed carbs on the blood glucose concentration. It can be expressed on mmol/l/g. A simple way to compute is the following: if 1 unit of insulin is needed to decrease BG by 2 mmol/l, and the same 1 U of insulin is needed to counteract 20g or carbs, then the CF is 2 mmol/l / 20g or 1 mmol/l/10g. (CF = CR/ISF) The BGI or Blood Glucose Impact is the absolute change in BG concentration due an amount of insulin or carbs. Examples : With an ISF of 2.5, the BGI of 4 units of insulin is 4U * 2.5mmol/l/U = 10 mmol/l (decrease in BG) With a CF of 1.8, the BGI of 50 grams of carbs is 50g * 1.8 mmol/l/g = 9 mmol/l (increase in BG) Linear, polynomial, exponential models \u2301 The cumulative BGI of all these factors combined is called the \"delta\", or change from the previous BG value. Is is calculated for 5 minute intervals, then added (or substracted) from the previous sensor glucose value. It does not describe how fast the change is happening . The Blood Glucose Impact of 1 unit of mealtime insulin is achieved at the end of the duration os action of insulin (DIA), and the BGI of 50g of carbs is achieved as the whole meal is absorbed, sometimes only 6 hours after the meal is consumed. Describing mathematically the intensity of the effect of insulin or carbs at any instant in time is called \"modeling\". Models in detail Next we'll see in detail how various insulins, food, endogenous glucose production and random effect can be modeled mathematically.","title":"Overview"},{"location":"model/overview/#overview","text":"Here you'll find details about the sequence of events happening in the simulation. When your simulation has been kickstarted , 3 sensor glucose values of 5 mmol/l or 90 md/dl (sgv) have been uploaded to your Nightscout (NS) website. The \"inner clock\" of the computer hosting the simulation will trigger the execution of various scripts at regular intervals. Sequence of events gather previous sensor glucose values gather previous \"treatments\" (food and/or insulin doses) compute the endogenous glucose production (EGP) compute a random variability factor (RND) compute the global impact of treatments, EGP and RND on glucose values (delta) compute the direction of arrows based on the previous deltas upload a new sensor glucose value and arrow to NS every 5 minutes repeat the cycle indefinitely","title":"Overview"},{"location":"model/overview/#isf-cr-cf-bgi","text":"The Insulin Sensitivity Factor (ISF) represents the impact on BG attributable to the effect of 1 unit of insulin. Its measurement unit is mmol/l/U or mg/dl/U. So an ISF of 2 means that the blood sugar concentration decreases 2 mmol/l for each given insulin unit. The Carb Ratio (CR) represents the amount of insulin needed to counteract a defined amount of carbs. It is expressed as g/U. For example if 10g of carbs are counteracted by 1 unit of mealtime insulin, the CR is 10 g/U. The Carb (sensitivity) Factor (CF) represents the impact of a defined amount of absorbed carbs on the blood glucose concentration. It can be expressed on mmol/l/g. A simple way to compute is the following: if 1 unit of insulin is needed to decrease BG by 2 mmol/l, and the same 1 U of insulin is needed to counteract 20g or carbs, then the CF is 2 mmol/l / 20g or 1 mmol/l/10g. (CF = CR/ISF) The BGI or Blood Glucose Impact is the absolute change in BG concentration due an amount of insulin or carbs. Examples : With an ISF of 2.5, the BGI of 4 units of insulin is 4U * 2.5mmol/l/U = 10 mmol/l (decrease in BG) With a CF of 1.8, the BGI of 50 grams of carbs is 50g * 1.8 mmol/l/g = 9 mmol/l (increase in BG)","title":"ISF, CR, CF, BGI"},{"location":"model/overview/#linear-polynomial-exponential-models","text":"The cumulative BGI of all these factors combined is called the \"delta\", or change from the previous BG value. Is is calculated for 5 minute intervals, then added (or substracted) from the previous sensor glucose value. It does not describe how fast the change is happening . The Blood Glucose Impact of 1 unit of mealtime insulin is achieved at the end of the duration os action of insulin (DIA), and the BGI of 50g of carbs is achieved as the whole meal is absorbed, sometimes only 6 hours after the meal is consumed. Describing mathematically the intensity of the effect of insulin or carbs at any instant in time is called \"modeling\". Models in detail Next we'll see in detail how various insulins, food, endogenous glucose production and random effect can be modeled mathematically.","title":"Linear, polynomial, exponential models"},{"location":"model/physical/","text":"Modeling exercise \u2301 Physical activity of various intensity affects glucose homeastasis in many ways. Intense activity triggers adrenaline release which increases the EGP transiently, while the muscles oxidize their own glycogen stores. There is an initial steep rise in BG. Less intense activity increases the Peripheral Glucose Uptake (PGU) and the BG will start to decline after 15-30 min. If physical activity continues, the PGU remains higher also in the post-exercise state, as the muscles replenish their glycogen stores for the next time they will be required. Quantifying activity requires motion sensors, heart rate sensors, etc... There is work in progress not yet described here, mainly involving smart watches counting steps and heart rate. Modeling physical activity is not included in this currentt version of the simulation .","title":"Physical activity"},{"location":"model/physical/#modeling-exercise","text":"Physical activity of various intensity affects glucose homeastasis in many ways. Intense activity triggers adrenaline release which increases the EGP transiently, while the muscles oxidize their own glycogen stores. There is an initial steep rise in BG. Less intense activity increases the Peripheral Glucose Uptake (PGU) and the BG will start to decline after 15-30 min. If physical activity continues, the PGU remains higher also in the post-exercise state, as the muscles replenish their glycogen stores for the next time they will be required. Quantifying activity requires motion sensors, heart rate sensors, etc... There is work in progress not yet described here, mainly involving smart watches counting steps and heart rate. Modeling physical activity is not included in this currentt version of the simulation .","title":"Modeling exercise"},{"location":"model/random/","text":"Random effects \u2301 Perlin noise \u2301 Since random number generators produce very \"jumpy\" values with various distributions between defined limits, I preferred trying a smoother, more \"organic\" noise function curve. If you have never heard or Ken Perlin, he developed an algorithm generating natural looking textures, used for example in Disney's computer animated sci-fi movie Tron in 1982. It can be used to generate 1-, 2-, 3- or n-dimensional arrays of values, which is perfect for this simulation. Using a one-dimensional perlin-noise generator , an array of 17 * 17 = 289 values is produced at regular intervals. A period of 24 hours has 1440 minutes, or 288 intervals of 5 minutes. Each value is attributed a timestamp in 5 minute increments. The mean variation is 0, which means that this background noise will cause temporary increases and decreases in BG, without major interference on the deflections caused by insulin, food or EGP. This animation rendered in p5.js illustrates a continuously oscillating perlin noise curve: Astronomy \u2301 Did I say something about the influence of the moon phase and planet alignment earlier? Well, this might very well be integrated here very soon... \ud83d\ude04","title":"Random variation"},{"location":"model/random/#random-effects","text":"","title":"Random effects"},{"location":"model/random/#perlin-noise","text":"Since random number generators produce very \"jumpy\" values with various distributions between defined limits, I preferred trying a smoother, more \"organic\" noise function curve. If you have never heard or Ken Perlin, he developed an algorithm generating natural looking textures, used for example in Disney's computer animated sci-fi movie Tron in 1982. It can be used to generate 1-, 2-, 3- or n-dimensional arrays of values, which is perfect for this simulation. Using a one-dimensional perlin-noise generator , an array of 17 * 17 = 289 values is produced at regular intervals. A period of 24 hours has 1440 minutes, or 288 intervals of 5 minutes. Each value is attributed a timestamp in 5 minute increments. The mean variation is 0, which means that this background noise will cause temporary increases and decreases in BG, without major interference on the deflections caused by insulin, food or EGP. This animation rendered in p5.js illustrates a continuously oscillating perlin noise curve:","title":"Perlin noise"},{"location":"model/random/#astronomy","text":"Did I say something about the influence of the moon phase and planet alignment earlier? Well, this might very well be integrated here very soon... \ud83d\ude04","title":"Astronomy"},{"location":"operate/insulin/","text":"Long acting insulin agonists \u2301 As there is no dedicated feature in Nightscout for declaring long-acting insulin injections, you will have to do it as an \"Announcement\" in Careportal. Announcements \u2301 When logging the injection in Careportal, select \"Announcement\" in the drop-down list. Again, check \"Sensor\", under Glucose Reading, so that the entry will be superimposed with the SGV curve. The syntax for the entry is important, as CGMSIM is not very error-tolerant. Mind the spelling and syntax ! In the \"notes\" field, please write down the selected insulin first, and then the number of units, separated by a single space: Valid entries are for example: - detemir 12 - Detemir 14 U - glargine 22 - Glargine 18 Units Example \u2301 The announced injection will appear as an orange dot on the SGV curve: After a while you'll want to look at your treatment results. Nightscout provides a very convenient and flexible tool for that .","title":"Declaring long-acting insulins"},{"location":"operate/insulin/#long-acting-insulin-agonists","text":"As there is no dedicated feature in Nightscout for declaring long-acting insulin injections, you will have to do it as an \"Announcement\" in Careportal.","title":"Long acting insulin agonists"},{"location":"operate/insulin/#announcements","text":"When logging the injection in Careportal, select \"Announcement\" in the drop-down list. Again, check \"Sensor\", under Glucose Reading, so that the entry will be superimposed with the SGV curve. The syntax for the entry is important, as CGMSIM is not very error-tolerant. Mind the spelling and syntax ! In the \"notes\" field, please write down the selected insulin first, and then the number of units, separated by a single space: Valid entries are for example: - detemir 12 - Detemir 14 U - glargine 22 - Glargine 18 Units","title":"Announcements"},{"location":"operate/insulin/#example","text":"The announced injection will appear as an orange dot on the SGV curve: After a while you'll want to look at your treatment results. Nightscout provides a very convenient and flexible tool for that .","title":"Example"},{"location":"operate/meals/","text":"Declaring meals and mealtime insulins \u2301 Declaring food alone \u2301 Open Careportal by pressing the \"+\" sign on the upper right corner of Nightscout. You are presented with the option to \"Log a Treatment\". Next to \"Event Type\", a drop-down menu lists all items you can choose from. Let's assume you want to enter some carbs due to a low glucose value. Select \"Carb Correction\" Under Glucose Reading, leave the filed blank, and instead tick the \"Sensor\" box. Next to Carbs Given, enter 20 Protein and Fat are unaccounted for, so leave them blank Add Notes (optional) Entered By : enter your initials, or anything identifying you as the author of the entry Select the correct time for the entry Submit the form. You will be prompted to review the details and accept. Now you should see the meal appear on the Nightscout curve. Placing your cursor on top of the meal marker, the details should appear. Declaring food and insulin \u2301 To declare mealtime insulin at the same time as carbs, the Event Type should be either \"Snack Bolus\" or \"Meal Bolus\". (Combo Bolus is not supported !). You will have to specify the \"Carb Time\", which is the time of the meal in relation to the insulin injection. So if you inject first, and eat 20 minutes later, Carb Time should be \"20 min later\". When submitting the entry, the time is the time of the insulin injection. Let's move on to declaring long acting insulin agonist injections (detemir and glargine).","title":"Declaring meals and mealtime insulin"},{"location":"operate/meals/#declaring-meals-and-mealtime-insulins","text":"","title":"Declaring meals and mealtime insulins"},{"location":"operate/meals/#declaring-food-alone","text":"Open Careportal by pressing the \"+\" sign on the upper right corner of Nightscout. You are presented with the option to \"Log a Treatment\". Next to \"Event Type\", a drop-down menu lists all items you can choose from. Let's assume you want to enter some carbs due to a low glucose value. Select \"Carb Correction\" Under Glucose Reading, leave the filed blank, and instead tick the \"Sensor\" box. Next to Carbs Given, enter 20 Protein and Fat are unaccounted for, so leave them blank Add Notes (optional) Entered By : enter your initials, or anything identifying you as the author of the entry Select the correct time for the entry Submit the form. You will be prompted to review the details and accept. Now you should see the meal appear on the Nightscout curve. Placing your cursor on top of the meal marker, the details should appear.","title":"Declaring food alone"},{"location":"operate/meals/#declaring-food-and-insulin","text":"To declare mealtime insulin at the same time as carbs, the Event Type should be either \"Snack Bolus\" or \"Meal Bolus\". (Combo Bolus is not supported !). You will have to specify the \"Carb Time\", which is the time of the meal in relation to the insulin injection. So if you inject first, and eat 20 minutes later, Carb Time should be \"20 min later\". When submitting the entry, the time is the time of the insulin injection. Let's move on to declaring long acting insulin agonist injections (detemir and glargine).","title":"Declaring food and insulin"},{"location":"operate/overview/","text":"Overview \u2301 You will have to declare meals, mealtime insulins and long-acting insulin agonists in Nightscout, in order for CGMSIM to make calculations. For this, you will have to authorize the device , on which you declare these events. Careportal \u2301 On the top right corner of your Nightscout website, you should see a lock. Click on the lock and you will be prompted to enter your API secret: Enter your API secret or \"Nightscout password\". Tick \"Remember this device\", so you won't have to do this every time, and click Authenticate . You will have to repeat this step whenever you open your Nightscout website on a different browser or device. When it's done, the lock on the upper-right corner has been replaced with a \"+\" mark. Let's move on to declare our first meal .","title":"Overview"},{"location":"operate/overview/#overview","text":"You will have to declare meals, mealtime insulins and long-acting insulin agonists in Nightscout, in order for CGMSIM to make calculations. For this, you will have to authorize the device , on which you declare these events.","title":"Overview"},{"location":"operate/overview/#careportal","text":"On the top right corner of your Nightscout website, you should see a lock. Click on the lock and you will be prompted to enter your API secret: Enter your API secret or \"Nightscout password\". Tick \"Remember this device\", so you won't have to do this every time, and click Authenticate . You will have to repeat this step whenever you open your Nightscout website on a different browser or device. When it's done, the lock on the upper-right corner has been replaced with a \"+\" mark. Let's move on to declare our first meal .","title":"Careportal"},{"location":"operate/pump/","text":"Insulin pump mode and DIYAPS \u2301 Nerdy stuff ahead ! This has not been yet fully tested, and you might encounter a few \ud83d\udc1b along the way. You have been warned ! While this simulator was built as a training tool for Multiple Daily Injection (MDI) treatment, it can also be used to simulate Continuous Subcutaneous Insulin Infusion (CSII) or more familiarly \"insulin pump\" therapy. Moreover, it can be coupled to a DIYAPS solution as openAPS . I have been doing this for a while on a \"custom\" setup, but now I added the required files to the repository for all to use. THIS IS A LIVE UNATTENDED CGMSIM PATIENT TAKEN CARE OF BY OPENAPS !: THIS IS A LIVE UNATTENDED CGMSIM PATIENT TAKEN CARE OF BY OPENAPS !: Nightscout setup \u2301 First of all, make sure that your instance of Nightscout is set to be used with DIAPS systems. It involves adding a few terms in the ENABLE variable of Heroku. You will want to see a pillbox with details about the APS calculations and another one with details about the pumps activity. Details on how to setup Nightscout for openAPS here. Details on how to setup Nightscout for iOS Loop here. CGMSIM setup \u2301 A couple of modifications are required in order to compute the insulin activity based on what the pump has been administrating. The calculations include the insulin activity from basal rates and from boluses, and not mealtime doses and long-acting agonists anymore. If you have built an openAPS rig, it will read the pump's memory, and upload the basal profile, other settings and bolus history to Nightscout. We will first setup CGMSIM to download that data from Nightscout. If you need more info on how to modify your crontab, please check crontab.guru ! In the suggested crontab for MDI mode, there were 4 lines : SHELL=/bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin 0 */6 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash perlin.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash get-all.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash upload-cgmsim.sh #30 23 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash surprise.sh Lines starting with # are commented out and will not be executed. Remove the # to activate them ! You will need to: Add a first line pointing to get-pump.sh , so that CGMSIM will download pump data from NS Edit the 4th line, so that CGMSIM will upload SGVs based on pump insulin: upload-cgmsim-pump.sh Add the 5th line if you want to run your rig unattended with meals issued automatically with matching boluses It should now look like this : SHELL=/bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash get-pump.sh 0 */6 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash perlin.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash get-all.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash upload-cgmsim-pump.sh #0 0 * * * cd /home/MYUSERNAME/cgmsim &&/bin/bash random_meal.sh #30 23 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash surprise.sh Timezone issue on cloud-based Linux VMs \u2301 The 5th line specifically triggers the execution of the bash script random_meal.sh at midnight 00:00 or 12PM. The 4 meals of the next day are computed (carb amounts and time of delivery). These are saved in a file, that will be overwritten the next time the script runs, 24 hours later. The absolute time of the script execution refers to the timezone where your computer running CGMSIM is located . If you are using a cloud-based solution, notice the time difference with your location. For me, with a DigitalOcean droplet located in Europe, the time difference is +3 hours. So I execute the sript at 21:00 o'clock \"server time\", which is 24:00 at my location. The line starts with : #0 21 * * * cd /home ... If you are running CGMSIM on a local machine and running the script at midnight, then the line should start with : #0 0 * * * cd /home ... Finally, you have to uncomment a line in one of the scripts. Edit get-all.sh by typing: nano get-all.sh ... and remove the # in front of: # node random_meal_upload.js Then save your changes. Voil\u00e0. Surprise meals \u2301 Just as a reminder, the \"surprise\" feature on the 6th and last line of the crontab creates an automatic meal completing the 200g carbs daily goal at 11:30PM. No automatic bolus, so your \"late snack\" remains untreated. Use with caution \ud83d\ude04","title":"Pump mode and DIYAPS"},{"location":"operate/pump/#insulin-pump-mode-and-diyaps","text":"Nerdy stuff ahead ! This has not been yet fully tested, and you might encounter a few \ud83d\udc1b along the way. You have been warned ! While this simulator was built as a training tool for Multiple Daily Injection (MDI) treatment, it can also be used to simulate Continuous Subcutaneous Insulin Infusion (CSII) or more familiarly \"insulin pump\" therapy. Moreover, it can be coupled to a DIYAPS solution as openAPS . I have been doing this for a while on a \"custom\" setup, but now I added the required files to the repository for all to use. THIS IS A LIVE UNATTENDED CGMSIM PATIENT TAKEN CARE OF BY OPENAPS !: THIS IS A LIVE UNATTENDED CGMSIM PATIENT TAKEN CARE OF BY OPENAPS !:","title":"Insulin pump mode and DIYAPS"},{"location":"operate/pump/#nightscout-setup","text":"First of all, make sure that your instance of Nightscout is set to be used with DIAPS systems. It involves adding a few terms in the ENABLE variable of Heroku. You will want to see a pillbox with details about the APS calculations and another one with details about the pumps activity. Details on how to setup Nightscout for openAPS here. Details on how to setup Nightscout for iOS Loop here.","title":"Nightscout setup"},{"location":"operate/pump/#cgmsim-setup","text":"A couple of modifications are required in order to compute the insulin activity based on what the pump has been administrating. The calculations include the insulin activity from basal rates and from boluses, and not mealtime doses and long-acting agonists anymore. If you have built an openAPS rig, it will read the pump's memory, and upload the basal profile, other settings and bolus history to Nightscout. We will first setup CGMSIM to download that data from Nightscout. If you need more info on how to modify your crontab, please check crontab.guru ! In the suggested crontab for MDI mode, there were 4 lines : SHELL=/bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin 0 */6 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash perlin.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash get-all.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash upload-cgmsim.sh #30 23 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash surprise.sh Lines starting with # are commented out and will not be executed. Remove the # to activate them ! You will need to: Add a first line pointing to get-pump.sh , so that CGMSIM will download pump data from NS Edit the 4th line, so that CGMSIM will upload SGVs based on pump insulin: upload-cgmsim-pump.sh Add the 5th line if you want to run your rig unattended with meals issued automatically with matching boluses It should now look like this : SHELL=/bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash get-pump.sh 0 */6 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash perlin.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash get-all.sh */5 * * * * cd /home/MYUSERNAME/cgmsim && /bin/bash upload-cgmsim-pump.sh #0 0 * * * cd /home/MYUSERNAME/cgmsim &&/bin/bash random_meal.sh #30 23 * * * cd /home/MYUSERNAME/cgmsim && /bin/bash surprise.sh","title":"CGMSIM setup"},{"location":"operate/pump/#timezone-issue-on-cloud-based-linux-vms","text":"The 5th line specifically triggers the execution of the bash script random_meal.sh at midnight 00:00 or 12PM. The 4 meals of the next day are computed (carb amounts and time of delivery). These are saved in a file, that will be overwritten the next time the script runs, 24 hours later. The absolute time of the script execution refers to the timezone where your computer running CGMSIM is located . If you are using a cloud-based solution, notice the time difference with your location. For me, with a DigitalOcean droplet located in Europe, the time difference is +3 hours. So I execute the sript at 21:00 o'clock \"server time\", which is 24:00 at my location. The line starts with : #0 21 * * * cd /home ... If you are running CGMSIM on a local machine and running the script at midnight, then the line should start with : #0 0 * * * cd /home ... Finally, you have to uncomment a line in one of the scripts. Edit get-all.sh by typing: nano get-all.sh ... and remove the # in front of: # node random_meal_upload.js Then save your changes. Voil\u00e0.","title":"Timezone issue on cloud-based Linux VMs"},{"location":"operate/pump/#surprise-meals","text":"Just as a reminder, the \"surprise\" feature on the 6th and last line of the crontab creates an automatic meal completing the 200g carbs daily goal at 11:30PM. No automatic bolus, so your \"late snack\" remains untreated. Use with caution \ud83d\ude04","title":"Surprise meals"},{"location":"operate/reports/","text":"Nightscout Reports \u2301 To access the \"Reports\" feature of Nightscout, just click on the the middle icon with 3 dashes in the right corner of your Nightscout window. This will open a menu offering to modify the visual content of Nightscout, but also to enter the Reports section. On the top of the Menu list, select Reports Generate \u2301 Select an item from the various options, such as \"Day to Day\" or \"Distribution\", and the period for which you want to generate a report. Then press the SHOW button. That's it. You can close to report by clicking on the X button on the top right corner of the window. Next take a moment to contact me if you have questions or suggestions, or if you want to contribute in some way, thank you ! \ud83d\ude04","title":"View reports"},{"location":"operate/reports/#nightscout-reports","text":"To access the \"Reports\" feature of Nightscout, just click on the the middle icon with 3 dashes in the right corner of your Nightscout window. This will open a menu offering to modify the visual content of Nightscout, but also to enter the Reports section. On the top of the Menu list, select Reports","title":"Nightscout Reports"},{"location":"operate/reports/#generate","text":"Select an item from the various options, such as \"Day to Day\" or \"Distribution\", and the period for which you want to generate a report. Then press the SHOW button. That's it. You can close to report by clicking on the X button on the top right corner of the window. Next take a moment to contact me if you have questions or suggestions, or if you want to contribute in some way, thank you ! \ud83d\ude04","title":"Generate"}]}